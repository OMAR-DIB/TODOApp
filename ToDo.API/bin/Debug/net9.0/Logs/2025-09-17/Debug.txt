2025-09-17 13:58:49.6746 | DEBUG | Registered model binder providers, in the following order: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider 
2025-09-17 13:58:49.7304 | DEBUG | Hosting starting 
2025-09-17 13:58:49.7422 | DEBUG | Reading data from file 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys\key-cb61fb62-f4ef-41cd-9d69-58589f90bbdb.xml'. 
2025-09-17 13:58:49.7557 | DEBUG | Found key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb}. 
2025-09-17 13:58:49.7691 | DEBUG | Considering key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} with expiration date 2025-12-16 08:29:21Z as default key. 
2025-09-17 13:58:49.7691 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 13:58:49.7691 | DEBUG | Decrypting secret element using Windows DPAPI. 
2025-09-17 13:58:49.7691 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 13:58:49.7805 | DEBUG | Opening CNG algorithm 'AES' from provider '(null)' with chaining mode CBC. 
2025-09-17 13:58:49.7805 | DEBUG | Opening CNG algorithm 'SHA256' from provider '(null)' with HMAC. 
2025-09-17 13:58:49.7805 | DEBUG | Using key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} as the default key. 
2025-09-17 13:58:49.7805 | DEBUG | Key ring with default key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} was loaded during application startup. 
2025-09-17 13:58:49.7805 | DEBUG | Middleware loaded 
2025-09-17 13:58:49.7805 | DEBUG | Middleware loaded. Script /_framework/aspnetcore-browser-refresh.js (16501 B). 
2025-09-17 13:58:49.7805 | DEBUG | Middleware loaded. Script /_framework/blazor-hotreload.js (799 B). 
2025-09-17 13:58:49.8191 | DEBUG | Middleware configuration started with options: {AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True} 
2025-09-17 13:58:49.8191 | DEBUG | Wildcard detected, all requests with hosts will be allowed. 
2025-09-17 13:58:49.8191 | DEBUG | Middleware loaded: DOTNET_MODIFIABLE_ASSEMBLIES=debug, __ASPNETCORE_BROWSER_TOOLS=true 
2025-09-17 13:58:49.8726 | DEBUG | Loaded hosting startup assembly ToDo.API 
2025-09-17 13:58:49.8726 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.ApiEndpointDiscovery 
2025-09-17 13:58:49.8726 | DEBUG | Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh 
2025-09-17 13:58:49.8726 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net 
2025-09-17 13:58:49.8785 | DEBUG | Executing API description provider 'EndpointMetadataApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 13:58:49.8785 | DEBUG | Executing API description provider 'DefaultApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 13:58:49.9085 | DEBUG | Hosting started 
2025-09-17 13:59:01.4640 | DEBUG | Connection id "0HNFLR4QRM4C5" received FIN. 
2025-09-17 13:59:01.4695 | DEBUG | Connection id "0HNFLR4QRM4C5" accepted. 
2025-09-17 13:59:01.4695 | DEBUG | Connection id "0HNFLR4QRM4C5" started. 
2025-09-17 13:59:01.4695 | DEBUG | Connection id "0HNFLR4QRM4C6" accepted. 
2025-09-17 13:59:01.4695 | DEBUG | Connection id "0HNFLR4QRM4C6" started. 
2025-09-17 13:59:01.4847 | DEBUG | Failed to authenticate HTTPS connection. System.IO.IOException: Received an unexpected EOF or 0 bytes from the transport stream.
   at System.Net.Security.SslStream.ReceiveHandshakeFrameAsync[TIOAdapter](CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.OnConnectionAsync(ConnectionContext context)
2025-09-17 13:59:01.4847 | DEBUG | Connection id "0HNFLR4QRM4C5" stopped. 
2025-09-17 13:59:01.4847 | DEBUG | Connection id "0HNFLR4QRM4C5" sending FIN because: "The Socket transport's send loop completed gracefully." 
2025-09-17 13:59:01.5168 | DEBUG | Connection 0HNFLR4QRM4C6 established using the following protocol: Tls13 
2025-09-17 13:59:01.5758 | DEBUG | 1 candidate(s) found for the request path '/api/user/login' 
2025-09-17 13:59:01.5758 | DEBUG | Endpoint 'ToDo.API.Controllers.UserController.Login (ToDo.API)' with route pattern 'api/User/login' is valid for the request path '/api/user/login' 
2025-09-17 13:59:01.5775 | DEBUG | Request matched endpoint 'ToDo.API.Controllers.UserController.Login (ToDo.API)' 
2025-09-17 13:59:01.5775 | DEBUG | Connection id "0HNFLR4QRM4C6", Request id "0HNFLR4QRM4C6:00000001": started reading request body. 
2025-09-17 13:59:01.5775 | DEBUG | Connection id "0HNFLR4QRM4C6", Request id "0HNFLR4QRM4C6:00000001": done reading request body. 
2025-09-17 13:59:01.6162 | DEBUG | AuthenticationScheme: Bearer was not authenticated. 
2025-09-17 13:59:01.6427 | DEBUG | Execution plan of authorization filters (in the following order): None 
2025-09-17 13:59:01.6427 | DEBUG | Execution plan of resource filters (in the following order): None 
2025-09-17 13:59:01.6427 | DEBUG | Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000) 
2025-09-17 13:59:01.6427 | DEBUG | Execution plan of exception filters (in the following order): None 
2025-09-17 13:59:01.6427 | DEBUG | Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000) 
2025-09-17 13:59:01.6427 | DEBUG | Executing controller factory for controller ToDo.API.Controllers.UserController (ToDo.API) 
2025-09-17 13:59:01.7132 | DEBUG | An 'IServiceProvider' was created for internal use by Entity Framework. 
2025-09-17 13:59:02.0742 | DEBUG | The index {'UserId'} was not created on entity type 'UserRole' as the properties are already covered by the index {'UserId', 'RoleId'}. 
2025-09-17 13:59:02.2709 | DEBUG | Entity Framework Core 9.0.8 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.8' with options: MigrationsAssembly=ToDo.Data EngineType=SqlServer  
2025-09-17 13:59:02.2709 | DEBUG | Executed controller factory for controller ToDo.API.Controllers.UserController (ToDo.API) 
2025-09-17 13:59:02.2709 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' ... 
2025-09-17 13:59:02.2709 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' using the name '' in request data ... 
2025-09-17 13:59:02.2709 | DEBUG | Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'. 
2025-09-17 13:59:02.2850 | DEBUG | JSON input formatter succeeded, deserializing to type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' 
2025-09-17 13:59:02.2850 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 13:59:02.2850 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 13:59:02.2850 | DEBUG | Attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' ... 
2025-09-17 13:59:02.2850 | DEBUG | Done attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 13:59:02.3568 | DEBUG | Compiling query expression: 
'DbSet<User>()
    .Where(u => u.Email == __dto_Email_0 && !(u.IsDeleted))
    .Where(e => !(e.IsDeleted))
    .Include("UserRoles")
    .Include("UserRoles.Role")
    .FirstOrDefault()' 
2025-09-17 13:59:02.3919 | DEBUG | Including navigation: 'User.UserRoles'. 
2025-09-17 13:59:02.4063 | DEBUG | Including navigation: 'UserRole.Role'. 
2025-09-17 13:59:02.6916 | DEBUG | Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<User>(
    asyncEnumerable: SingleQueryingEnumerable.Create<User>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: User.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: User.CreatedAt (DateTime) Required, 1], [Property: User.CreatedBy (string) Required, 2], [Property: User.Email (string) Required, 3], [Property: User.EmailVerificationCodeExpires (DateTime?), 4], [Property: User.EmailVerificationCodeHash (string), 5], [Property: User.IsDeleted (bool) Required, 6], [Property: User.IsEmailConfirmed (bool) Required, 7], [Property: User.LastVerificationSentAt (DateTime?), 8], [Property: User.Password (string) Required, 9], [Property: User.UpdatedAt (DateTime?), 10], [Property: User.Username (string) Required MaxLength(50), 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: UserRole.UserId (int) Required PK FK AfterSave:Throw, 12], [Property: UserRole.RoleId (int) Required PK FK Index AfterSave:Throw, 13], [Property: UserRole.CreatedAt (DateTime) Required, 14], [Property: UserRole.CreatedBy (string) Required, 15], [Property: UserRole.Id (int) Required ValueGenerated.OnAdd, 16], [Property: UserRole.IsDeleted (bool) Required, 17], [Property: UserRole.UpdatedAt (DateTime?), 18] }
                3 -> Dictionary<IProperty, int> { [Property: Role.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 19], [Property: Role.CreatedAt (DateTime) Required, 20], [Property: Role.CreatedBy (string) Required, 21], [Property: Role.IsDeleted (bool) Required, 22], [Property: Role.Name (string) Required, 23], [Property: Role.UpdatedAt (DateTime?), 24] }
                4 -> 12
                5 -> 13
                6 -> 19
            SELECT u1.Id, u1.CreatedAt, u1.CreatedBy, u1.Email, u1.EmailVerificationCodeExpires, u1.EmailVerificationCodeHash, u1.IsDeleted, u1.IsEmailConfirmed, u1.LastVerificationSentAt, u1.Password, u1.UpdatedAt, u1.Username, s.UserId, s.RoleId, s.CreatedAt, s.CreatedBy, s.Id, s.IsDeleted, s.UpdatedAt, s.Id0, s.CreatedAt0, s.CreatedBy0, s.IsDeleted0, s.Name, s.UpdatedAt0
            FROM 
            (
                SELECT TOP(1) u.Id, u.CreatedAt, u.CreatedBy, u.Email, u.EmailVerificationCodeExpires, u.EmailVerificationCodeHash, u.IsDeleted, u.IsEmailConfirmed, u.LastVerificationSentAt, u.Password, u.UpdatedAt, u.Username
                FROM Users AS u
                WHERE ((u.Email == @__dto_Email_0) && Not(u.IsDeleted)) && Not(u.IsDeleted)
            ) AS u1
            LEFT JOIN 
            (
                SELECT u0.UserId, u0.RoleId, u0.CreatedAt, u0.CreatedBy, u0.Id, u0.IsDeleted, u0.UpdatedAt, r.Id AS Id0, r.CreatedAt AS CreatedAt0, r.CreatedBy AS CreatedBy0, r.IsDeleted AS IsDeleted0, r.Name, r.UpdatedAt AS UpdatedAt0
                FROM UserRole AS u0
                INNER JOIN Roles AS r ON u0.RoleId == r.Id
            ) AS s ON u1.Id == s.UserId
            ORDER BY u1.Id ASC, s.UserId ASC, s.RoleId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: User.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: User.CreatedAt (DateTime) Required, 1], [Property: User.CreatedBy (string) Required, 2], [Property: User.Email (string) Required, 3], [Property: User.EmailVerificationCodeExpires (DateTime?), 4], [Property: User.EmailVerificationCodeHash (string), 5], [Property: User.IsDeleted (bool) Required, 6], [Property: User.IsEmailConfirmed (bool) Required, 7], [Property: User.LastVerificationSentAt (DateTime?), 8], [Property: User.Password (string) Required, 9], [Property: User.UpdatedAt (DateTime?), 10], [Property: User.Username (string) Required MaxLength(50), 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: UserRole.UserId (int) Required PK FK AfterSave:Throw, 12], [Property: UserRole.RoleId (int) Required PK FK Index AfterSave:Throw, 13], [Property: UserRole.CreatedAt (DateTime) Required, 14], [Property: UserRole.CreatedBy (string) Required, 15], [Property: UserRole.Id (int) Required ValueGenerated.OnAdd, 16], [Property: UserRole.IsDeleted (bool) Required, 17], [Property: UserRole.UpdatedAt (DateTime?), 18] }
                3 -> Dictionary<IProperty, int> { [Property: Role.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 19], [Property: Role.CreatedAt (DateTime) Required, 20], [Property: Role.CreatedBy (string) Required, 21], [Property: Role.IsDeleted (bool) Required, 22], [Property: Role.Name (string) Required, 23], [Property: Role.UpdatedAt (DateTime?), 24] }
                4 -> 12
                5 -> 13
                6 -> 19
            SELECT u1.Id, u1.CreatedAt, u1.CreatedBy, u1.Email, u1.EmailVerificationCodeExpires, u1.EmailVerificationCodeHash, u1.IsDeleted, u1.IsEmailConfirmed, u1.LastVerificationSentAt, u1.Password, u1.UpdatedAt, u1.Username, s.UserId, s.RoleId, s.CreatedAt, s.CreatedBy, s.Id, s.IsDeleted, s.UpdatedAt, s.Id0, s.CreatedAt0, s.CreatedBy0, s.IsDeleted0, s.Name, s.UpdatedAt0
            FROM 
            (
                SELECT TOP(1) u.Id, u.CreatedAt, u.CreatedBy, u.Email, u.EmailVerificationCodeExpires, u.EmailVerificationCodeHash, u.IsDeleted, u.IsEmailConfirmed, u.LastVerificationSentAt, u.Password, u.UpdatedAt, u.Username
                FROM Users AS u
                WHERE ((u.Email == @__dto_Email_0) && Not(u.IsDeleted)) && Not(u.IsDeleted)
            ) AS u1
            LEFT JOIN 
            (
                SELECT u0.UserId, u0.RoleId, u0.CreatedAt, u0.CreatedBy, u0.Id, u0.IsDeleted, u0.UpdatedAt, r.Id AS Id0, r.CreatedAt AS CreatedAt0, r.CreatedBy AS CreatedBy0, r.IsDeleted AS IsDeleted0, r.Name, r.UpdatedAt AS UpdatedAt0
                FROM UserRole AS u0
                INNER JOIN Roles AS r ON u0.RoleId == r.Id
            ) AS s ON u1.Id == s.UserId
            ORDER BY u1.Id ASC, s.UserId ASC, s.RoleId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: [LIFTABLE Constant: ReaderColumn[] { ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<bool>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<int>, ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<int>, ReaderColumn<bool>, ReaderColumn<DateTime>, ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<object>, ReaderColumn<DateTime> } | Resolver: namelessParameter{0} => new ReaderColumn[]
        { 
            new ReaderColumn<int>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(0)
            ), 
            new ReaderColumn<DateTime>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(1)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(2)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Email"), 
                (dataReader, indexMap) => (object)dataReader.GetString(3)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("EmailVerificationCodeExpires"), 
                (dataReader, indexMap) => dataReader.GetDateTime(4)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("EmailVerificationCodeHash"), 
                (dataReader, indexMap) => (object)dataReader.GetString(5)
            ), 
            new ReaderColumn<bool>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(6)
            ), 
            new ReaderColumn<bool>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("IsEmailConfirmed"), 
                (dataReader, indexMap) => dataReader.GetBoolean(7)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("LastVerificationSentAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(8)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Password"), 
                (dataReader, indexMap) => (object)dataReader.GetString(9)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(10)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Username"), 
                (dataReader, indexMap) => (object)dataReader.GetString(11)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("UserId"), 
                (dataReader, indexMap) => dataReader.GetInt32(12)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("RoleId"), 
                (dataReader, indexMap) => dataReader.GetInt32(13)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(14)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(15)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(16)
            ), 
            new ReaderColumn<bool>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(17)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(18)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(19)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(20)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(21)
            ), 
            new ReaderColumn<bool>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(22)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("Name"), 
                (dataReader, indexMap) => (object)dataReader.GetString(23)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(24)
            ) 
        }], 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                User entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    User instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(User);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: User.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (User)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")]: 
                                {
                                    return 
                                    {
                                        User instance;
                                        instance = new User();
                                        instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                        instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(1);
                                        instance.<CreatedBy>k__BackingField = (string)dataReader.GetFieldValue<object>(2);
                                        instance.<Email>k__BackingField = (string)dataReader.GetFieldValue<object>(3);
                                        instance.<EmailVerificationCodeExpires>k__BackingField = dataReader.IsDBNull(4) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(4);
                                        instance.<EmailVerificationCodeHash>k__BackingField = dataReader.IsDBNull(5) ? default(string) : (string)dataReader.GetFieldValue<object>(5);
                                        instance.<IsDeleted>k__BackingField = dataReader.GetBoolean(6);
                                        instance.<IsEmailConfirmed>k__BackingField = dataReader.GetBoolean(7);
                                        instance.<LastVerificationSentAt>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(8);
                                        instance.<Password>k__BackingField = (string)dataReader.GetFieldValue<object>(9);
                                        instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(10) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(10);
                                        instance.<Username>k__BackingField = (string)dataReader.GetFieldValue<object>(11);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(User)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<User, User>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (User)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: User.UserRoles (ICollection<UserRole>) Collection ToDependent UserRole Inverse: User | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindNavigation("UserRoles")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<User, ICollection<UserRole>, UserRole> | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindNavigation("UserRoles").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<User, UserRole>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    (object)dataReader.IsDBNull(12) ? default(int?) : (int?)dataReader.GetInt32(12), 
                    (object)dataReader.IsDBNull(13) ? default(int?) : (int?)dataReader.GetInt32(13), 
                    (object)dataReader.IsDBNull(19) ? default(int?) : (int?)dataReader.GetInt32(19) 
                }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    UserRole entity;
                    Role entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        UserRole instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(UserRole);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: UserRole.UserId, UserRole.RoleId PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindPrimaryKey()], 
                            keyValues: new object[]
                            { 
                                dataReader.IsDBNull(12) ? default(object) : (object)dataReader.GetInt32(12), 
                                dataReader.IsDBNull(13) ? default(object) : (object)dataReader.GetInt32(13) 
                            }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (UserRole)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: UserRole | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: UserRole | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole")]: 
                                    {
                                        return 
                                        {
                                            UserRole instance;
                                            instance = new UserRole();
                                            instance.<UserId>k__BackingField = dataReader.IsDBNull(12) ? default(int) : dataReader.GetInt32(12);
                                            instance.<RoleId>k__BackingField = dataReader.IsDBNull(13) ? default(int) : dataReader.GetInt32(13);
                                            instance.<CreatedAt>k__BackingField = dataReader.IsDBNull(14) ? default(DateTime) : dataReader.GetDateTime(14);
                                            instance.<CreatedBy>k__BackingField = dataReader.IsDBNull(15) ? default(string) : (string)dataReader.GetFieldValue<object>(15);
                                            instance.<Id>k__BackingField = dataReader.IsDBNull(16) ? default(int) : dataReader.GetInt32(16);
                                            instance.<IsDeleted>k__BackingField = dataReader.IsDBNull(17) ? default(bool) : dataReader.GetBoolean(17);
                                            instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(18) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(18);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: UserRole | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(UserRole)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    entity = 
                    {
                        MaterializationContext materializationContext3;
                        IEntityType entityType3;
                        Role instance3;
                        InternalEntityEntry entry3;
                        bool hasNullKey3;
                        materializationContext3 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance3 = default(Role);
                        entry3 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: Role.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindPrimaryKey()], 
                            keyValues: new object[]{ dataReader.IsDBNull(19) ? default(object) : (object)dataReader.GetInt32(19) }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey3);
                        !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
                        {
                            entityType3 = entry3.EntityType;
                            return instance3 = (Role)entry3.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot3;
                            shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType3 = [LIFTABLE Constant: EntityType: Role | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role")];
                            instance3 = switch (entityType3)
                            {
                                case [LIFTABLE Constant: EntityType: Role | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role")]: 
                                    {
                                        return 
                                        {
                                            Role instance;
                                            instance = new Role();
                                            instance.<Id>k__BackingField = dataReader.IsDBNull(19) ? default(int) : dataReader.GetInt32(19);
                                            instance.<CreatedAt>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime) : dataReader.GetDateTime(20);
                                            instance.<CreatedBy>k__BackingField = dataReader.IsDBNull(21) ? default(string) : (string)dataReader.GetFieldValue<object>(21);
                                            instance.<IsDeleted>k__BackingField = dataReader.IsDBNull(22) ? default(bool) : dataReader.GetBoolean(22);
                                            instance.<Name>k__BackingField = dataReader.IsDBNull(23) ? default(string) : (string)dataReader.GetFieldValue<object>(23);
                                            instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(24) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(24);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext3.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: Role | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(Role)
                            }
                            ;
                            entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType3, 
                                entity: instance3, 
                                snapshot: shadowSnapshot3);
                            return instance3;
                        } : default(void);
                        return instance3;
                    };
                    ShaperProcessingExpressionVisitor.IncludeReference<UserRole, UserRole, Role>(
                        queryContext: queryContext, 
                        entity: entity, 
                        relatedEntity: entity, 
                        navigation: [LIFTABLE Constant: Navigation: UserRole.Role (Role) ToPrincipal Role Inverse: UserRoles | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindNavigation("Role")], 
                        inverseNavigation: [LIFTABLE Constant: Navigation: Role.UserRoles (ICollection<UserRole>) Collection ToDependent UserRole Inverse: Role | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindNavigation("UserRoles")], 
                        fixup: (namelessParameter{14}, namelessParameter{15}) => 
                        {
                            namelessParameter{14}.<Role>k__BackingField = namelessParameter{15};
                            return [LIFTABLE Constant: ClrICollectionAccessor<Role, ICollection<UserRole>, UserRole> | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindNavigation("UserRoles").GetCollectionAccessor()].Add(
                                entity: namelessParameter{15}, 
                                value: namelessParameter{14}, 
                                forMaterialization: True);
                        }, 
                        trackingQuery: True);
                    return entity;
                }, 
                inverseNavigation: [LIFTABLE Constant: Navigation: UserRole.User (User) ToPrincipal User Inverse: UserRoles | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindNavigation("User")], 
                fixup: (namelessParameter{18}, namelessParameter{19}) => 
                {
                    [LIFTABLE Constant: ClrICollectionAccessor<User, ICollection<UserRole>, UserRole> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindNavigation("UserRoles").GetCollectionAccessor()].Add(
                        entity: namelessParameter{18}, 
                        value: namelessParameter{19}, 
                        forMaterialization: True);
                    return namelessParameter{19}.<User>k__BackingField = namelessParameter{18};
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (User)(resultContext.Values[0]) : default(User);
        }, 
        contextType: ToDo.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)' 
2025-09-17 13:59:02.7378 | DEBUG | Creating DbConnection. 
2025-09-17 13:59:02.7538 | DEBUG | Created DbConnection. (13ms). 
2025-09-17 13:59:02.7538 | DEBUG | Opening connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 13:59:02.9029 | DEBUG | Opened connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 13:59:02.9029 | DEBUG | Creating DbCommand for 'ExecuteReader'. 
2025-09-17 13:59:02.9120 | DEBUG | Created DbCommand for 'ExecuteReader' (2ms). 
2025-09-17 13:59:02.9120 | DEBUG | Initialized DbCommand for 'ExecuteReader' (14ms). 
2025-09-17 13:59:02.9283 | DEBUG | Executing DbCommand [Parameters=[@__dto_Email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [u1].[Id], [u1].[CreatedAt], [u1].[CreatedBy], [u1].[Email], [u1].[EmailVerificationCodeExpires], [u1].[EmailVerificationCodeHash], [u1].[IsDeleted], [u1].[IsEmailConfirmed], [u1].[LastVerificationSentAt], [u1].[Password], [u1].[UpdatedAt], [u1].[Username], [s].[UserId], [s].[RoleId], [s].[CreatedAt], [s].[CreatedBy], [s].[Id], [s].[IsDeleted], [s].[UpdatedAt], [s].[Id0], [s].[CreatedAt0], [s].[CreatedBy0], [s].[IsDeleted0], [s].[Name], [s].[UpdatedAt0]
FROM (
    SELECT TOP(1) [u].[Id], [u].[CreatedAt], [u].[CreatedBy], [u].[Email], [u].[EmailVerificationCodeExpires], [u].[EmailVerificationCodeHash], [u].[IsDeleted], [u].[IsEmailConfirmed], [u].[LastVerificationSentAt], [u].[Password], [u].[UpdatedAt], [u].[Username]
    FROM [Users] AS [u]
    WHERE [u].[Email] = @__dto_Email_0 AND [u].[IsDeleted] = CAST(0 AS bit) AND [u].[IsDeleted] = CAST(0 AS bit)
) AS [u1]
LEFT JOIN (
    SELECT [u0].[UserId], [u0].[RoleId], [u0].[CreatedAt], [u0].[CreatedBy], [u0].[Id], [u0].[IsDeleted], [u0].[UpdatedAt], [r].[Id] AS [Id0], [r].[CreatedAt] AS [CreatedAt0], [r].[CreatedBy] AS [CreatedBy0], [r].[IsDeleted] AS [IsDeleted0], [r].[Name], [r].[UpdatedAt] AS [UpdatedAt0]
    FROM [UserRole] AS [u0]
    INNER JOIN [Roles] AS [r] ON [u0].[RoleId] = [r].[Id]
) AS [s] ON [u1].[Id] = [s].[UserId]
ORDER BY [u1].[Id], [s].[UserId], [s].[RoleId] 
2025-09-17 13:59:03.0403 | DEBUG | Context 'AppDbContext' started tracking 'User' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 13:59:03.0803 | DEBUG | Closing data reader to 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 13:59:03.0803 | DEBUG | A data reader for 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' is being disposed after spending 59ms reading results. 
2025-09-17 13:59:03.0803 | DEBUG | Closing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 13:59:03.0803 | DEBUG | Closed connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' (3ms). 
2025-09-17 13:59:03.1716 | DEBUG | List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter 
2025-09-17 13:59:03.1716 | DEBUG | No information found on request to perform content negotiation. 
2025-09-17 13:59:03.1716 | DEBUG | Attempting to select an output formatter without using a content type as no explicit content types were specified for the response. 
2025-09-17 13:59:03.1716 | DEBUG | Attempting to select the first formatter in the output formatters list which can write the result. 
2025-09-17 13:59:03.1716 | DEBUG | Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response. 
2025-09-17 13:59:03.1895 | DEBUG | Connection id "0HNFLR4QRM4C6" completed keep alive response. 
2025-09-17 13:59:03.1895 | DEBUG | 'AppDbContext' disposed. 
2025-09-17 13:59:03.1895 | DEBUG | Disposing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 13:59:03.1895 | DEBUG | Disposed connection to database '' on server '' (1ms). 
2025-09-17 14:01:14.8284 | DEBUG | Connection id "0HNFLR4QRM4C6" disconnecting. 
2025-09-17 14:01:14.8291 | DEBUG | Connection id "0HNFLR4QRM4C6" stopped. 
2025-09-17 14:01:14.8291 | DEBUG | Connection id "0HNFLR4QRM4C6" sending FIN because: "The Socket transport's send loop completed gracefully." 
2025-09-17 14:31:48.3809 | DEBUG | Registered model binder providers, in the following order: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider 
2025-09-17 14:31:48.4568 | DEBUG | Hosting starting 
2025-09-17 14:31:48.4838 | DEBUG | Reading data from file 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys\key-cb61fb62-f4ef-41cd-9d69-58589f90bbdb.xml'. 
2025-09-17 14:31:48.4838 | DEBUG | Found key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb}. 
2025-09-17 14:31:48.5128 | DEBUG | Considering key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} with expiration date 2025-12-16 08:29:21Z as default key. 
2025-09-17 14:31:48.5143 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 14:31:48.5143 | DEBUG | Decrypting secret element using Windows DPAPI. 
2025-09-17 14:31:48.5143 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 14:31:48.5143 | DEBUG | Opening CNG algorithm 'AES' from provider '(null)' with chaining mode CBC. 
2025-09-17 14:31:48.5143 | DEBUG | Opening CNG algorithm 'SHA256' from provider '(null)' with HMAC. 
2025-09-17 14:31:48.5143 | DEBUG | Using key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} as the default key. 
2025-09-17 14:31:48.5143 | DEBUG | Key ring with default key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} was loaded during application startup. 
2025-09-17 14:31:48.5143 | DEBUG | Middleware loaded 
2025-09-17 14:31:48.5143 | DEBUG | Middleware loaded. Script /_framework/aspnetcore-browser-refresh.js (16501 B). 
2025-09-17 14:31:48.5304 | DEBUG | Middleware loaded. Script /_framework/blazor-hotreload.js (799 B). 
2025-09-17 14:31:48.5596 | DEBUG | Middleware configuration started with options: {AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True} 
2025-09-17 14:31:48.5596 | DEBUG | Wildcard detected, all requests with hosts will be allowed. 
2025-09-17 14:31:48.5630 | DEBUG | Middleware loaded: DOTNET_MODIFIABLE_ASSEMBLIES=debug, __ASPNETCORE_BROWSER_TOOLS=true 
2025-09-17 14:31:48.6122 | DEBUG | Loaded hosting startup assembly ToDo.API 
2025-09-17 14:31:48.6122 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.ApiEndpointDiscovery 
2025-09-17 14:31:48.6122 | DEBUG | Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh 
2025-09-17 14:31:48.6122 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net 
2025-09-17 14:31:48.6122 | DEBUG | Executing API description provider 'EndpointMetadataApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 14:31:48.6122 | DEBUG | Executing API description provider 'DefaultApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 14:31:48.6515 | DEBUG | Hosting started 
2025-09-17 14:31:54.3415 | DEBUG | Connection id "0HNFLRN6QGE1M" received FIN. 
2025-09-17 14:31:54.3539 | DEBUG | Connection id "0HNFLRN6QGE1M" accepted. 
2025-09-17 14:31:54.3539 | DEBUG | Connection id "0HNFLRN6QGE1M" started. 
2025-09-17 14:31:54.3539 | DEBUG | Connection id "0HNFLRN6QGE1N" accepted. 
2025-09-17 14:31:54.3539 | DEBUG | Connection id "0HNFLRN6QGE1N" started. 
2025-09-17 14:31:54.3890 | DEBUG | Failed to authenticate HTTPS connection. System.IO.IOException: Received an unexpected EOF or 0 bytes from the transport stream.
   at System.Net.Security.SslStream.ReceiveHandshakeFrameAsync[TIOAdapter](CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.OnConnectionAsync(ConnectionContext context)
2025-09-17 14:31:54.4020 | DEBUG | Connection id "0HNFLRN6QGE1M" stopped. 
2025-09-17 14:31:54.4020 | DEBUG | Connection id "0HNFLRN6QGE1M" sending FIN because: "The Socket transport's send loop completed gracefully." 
2025-09-17 14:31:54.4461 | DEBUG | Connection 0HNFLRN6QGE1N established using the following protocol: Tls13 
2025-09-17 14:31:54.5534 | DEBUG | 1 candidate(s) found for the request path '/api/user/login' 
2025-09-17 14:31:54.5534 | DEBUG | Endpoint 'ToDo.API.Controllers.UserController.Login (ToDo.API)' with route pattern 'api/User/login' is valid for the request path '/api/user/login' 
2025-09-17 14:31:54.5534 | DEBUG | Request matched endpoint 'ToDo.API.Controllers.UserController.Login (ToDo.API)' 
2025-09-17 14:31:54.5996 | DEBUG | Connection id "0HNFLRN6QGE1N", Request id "0HNFLRN6QGE1N:00000001": started reading request body. 
2025-09-17 14:31:54.5996 | DEBUG | Connection id "0HNFLRN6QGE1N", Request id "0HNFLRN6QGE1N:00000001": done reading request body. 
2025-09-17 14:31:54.6573 | DEBUG | AuthenticationScheme: Bearer was not authenticated. 
2025-09-17 14:31:54.7076 | DEBUG | Execution plan of authorization filters (in the following order): None 
2025-09-17 14:31:54.7076 | DEBUG | Execution plan of resource filters (in the following order): None 
2025-09-17 14:31:54.7076 | DEBUG | Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000) 
2025-09-17 14:31:54.7076 | DEBUG | Execution plan of exception filters (in the following order): None 
2025-09-17 14:31:54.7076 | DEBUG | Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000) 
2025-09-17 14:31:54.7076 | DEBUG | Executing controller factory for controller ToDo.API.Controllers.UserController (ToDo.API) 
2025-09-17 14:31:54.8730 | DEBUG | An 'IServiceProvider' was created for internal use by Entity Framework. 
2025-09-17 14:31:55.7055 | DEBUG | The index {'UserId'} was not created on entity type 'UserRole' as the properties are already covered by the index {'UserId', 'RoleId'}. 
2025-09-17 14:31:56.4689 | DEBUG | Entity Framework Core 9.0.8 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.8' with options: MigrationsAssembly=ToDo.Data EngineType=SqlServer  
2025-09-17 14:31:56.4689 | DEBUG | Executed controller factory for controller ToDo.API.Controllers.UserController (ToDo.API) 
2025-09-17 14:31:56.4864 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' ... 
2025-09-17 14:31:56.4864 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' using the name '' in request data ... 
2025-09-17 14:31:56.4864 | DEBUG | Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'. 
2025-09-17 14:31:56.5249 | DEBUG | JSON input formatter succeeded, deserializing to type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' 
2025-09-17 14:31:56.5249 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 14:31:56.5249 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 14:31:56.5249 | DEBUG | Attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' ... 
2025-09-17 14:31:56.5448 | DEBUG | Done attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 14:31:56.7932 | DEBUG | Compiling query expression: 
'DbSet<User>()
    .Where(u => u.Email == __dto_Email_0 && !(u.IsDeleted))
    .Where(e => !(e.IsDeleted))
    .Include("UserRoles")
    .Include("UserRoles.Role")
    .FirstOrDefault()' 
2025-09-17 14:31:56.9413 | DEBUG | Including navigation: 'User.UserRoles'. 
2025-09-17 14:31:57.0210 | DEBUG | Including navigation: 'UserRole.Role'. 
2025-09-17 14:31:57.9309 | DEBUG | Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<User>(
    asyncEnumerable: SingleQueryingEnumerable.Create<User>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: User.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: User.CreatedAt (DateTime) Required, 1], [Property: User.CreatedBy (string) Required, 2], [Property: User.Email (string) Required, 3], [Property: User.EmailVerificationCodeExpires (DateTime?), 4], [Property: User.EmailVerificationCodeHash (string), 5], [Property: User.IsDeleted (bool) Required, 6], [Property: User.IsEmailConfirmed (bool) Required, 7], [Property: User.LastVerificationSentAt (DateTime?), 8], [Property: User.Password (string) Required, 9], [Property: User.UpdatedAt (DateTime?), 10], [Property: User.Username (string) Required MaxLength(50), 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: UserRole.UserId (int) Required PK FK AfterSave:Throw, 12], [Property: UserRole.RoleId (int) Required PK FK Index AfterSave:Throw, 13], [Property: UserRole.CreatedAt (DateTime) Required, 14], [Property: UserRole.CreatedBy (string) Required, 15], [Property: UserRole.Id (int) Required ValueGenerated.OnAdd, 16], [Property: UserRole.IsDeleted (bool) Required, 17], [Property: UserRole.UpdatedAt (DateTime?), 18] }
                3 -> Dictionary<IProperty, int> { [Property: Role.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 19], [Property: Role.CreatedAt (DateTime) Required, 20], [Property: Role.CreatedBy (string) Required, 21], [Property: Role.IsDeleted (bool) Required, 22], [Property: Role.Name (string) Required, 23], [Property: Role.UpdatedAt (DateTime?), 24] }
                4 -> 12
                5 -> 13
                6 -> 19
            SELECT u1.Id, u1.CreatedAt, u1.CreatedBy, u1.Email, u1.EmailVerificationCodeExpires, u1.EmailVerificationCodeHash, u1.IsDeleted, u1.IsEmailConfirmed, u1.LastVerificationSentAt, u1.Password, u1.UpdatedAt, u1.Username, s.UserId, s.RoleId, s.CreatedAt, s.CreatedBy, s.Id, s.IsDeleted, s.UpdatedAt, s.Id0, s.CreatedAt0, s.CreatedBy0, s.IsDeleted0, s.Name, s.UpdatedAt0
            FROM 
            (
                SELECT TOP(1) u.Id, u.CreatedAt, u.CreatedBy, u.Email, u.EmailVerificationCodeExpires, u.EmailVerificationCodeHash, u.IsDeleted, u.IsEmailConfirmed, u.LastVerificationSentAt, u.Password, u.UpdatedAt, u.Username
                FROM Users AS u
                WHERE ((u.Email == @__dto_Email_0) && Not(u.IsDeleted)) && Not(u.IsDeleted)
            ) AS u1
            LEFT JOIN 
            (
                SELECT u0.UserId, u0.RoleId, u0.CreatedAt, u0.CreatedBy, u0.Id, u0.IsDeleted, u0.UpdatedAt, r.Id AS Id0, r.CreatedAt AS CreatedAt0, r.CreatedBy AS CreatedBy0, r.IsDeleted AS IsDeleted0, r.Name, r.UpdatedAt AS UpdatedAt0
                FROM UserRole AS u0
                INNER JOIN Roles AS r ON u0.RoleId == r.Id
            ) AS s ON u1.Id == s.UserId
            ORDER BY u1.Id ASC, s.UserId ASC, s.RoleId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: User.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: User.CreatedAt (DateTime) Required, 1], [Property: User.CreatedBy (string) Required, 2], [Property: User.Email (string) Required, 3], [Property: User.EmailVerificationCodeExpires (DateTime?), 4], [Property: User.EmailVerificationCodeHash (string), 5], [Property: User.IsDeleted (bool) Required, 6], [Property: User.IsEmailConfirmed (bool) Required, 7], [Property: User.LastVerificationSentAt (DateTime?), 8], [Property: User.Password (string) Required, 9], [Property: User.UpdatedAt (DateTime?), 10], [Property: User.Username (string) Required MaxLength(50), 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: UserRole.UserId (int) Required PK FK AfterSave:Throw, 12], [Property: UserRole.RoleId (int) Required PK FK Index AfterSave:Throw, 13], [Property: UserRole.CreatedAt (DateTime) Required, 14], [Property: UserRole.CreatedBy (string) Required, 15], [Property: UserRole.Id (int) Required ValueGenerated.OnAdd, 16], [Property: UserRole.IsDeleted (bool) Required, 17], [Property: UserRole.UpdatedAt (DateTime?), 18] }
                3 -> Dictionary<IProperty, int> { [Property: Role.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 19], [Property: Role.CreatedAt (DateTime) Required, 20], [Property: Role.CreatedBy (string) Required, 21], [Property: Role.IsDeleted (bool) Required, 22], [Property: Role.Name (string) Required, 23], [Property: Role.UpdatedAt (DateTime?), 24] }
                4 -> 12
                5 -> 13
                6 -> 19
            SELECT u1.Id, u1.CreatedAt, u1.CreatedBy, u1.Email, u1.EmailVerificationCodeExpires, u1.EmailVerificationCodeHash, u1.IsDeleted, u1.IsEmailConfirmed, u1.LastVerificationSentAt, u1.Password, u1.UpdatedAt, u1.Username, s.UserId, s.RoleId, s.CreatedAt, s.CreatedBy, s.Id, s.IsDeleted, s.UpdatedAt, s.Id0, s.CreatedAt0, s.CreatedBy0, s.IsDeleted0, s.Name, s.UpdatedAt0
            FROM 
            (
                SELECT TOP(1) u.Id, u.CreatedAt, u.CreatedBy, u.Email, u.EmailVerificationCodeExpires, u.EmailVerificationCodeHash, u.IsDeleted, u.IsEmailConfirmed, u.LastVerificationSentAt, u.Password, u.UpdatedAt, u.Username
                FROM Users AS u
                WHERE ((u.Email == @__dto_Email_0) && Not(u.IsDeleted)) && Not(u.IsDeleted)
            ) AS u1
            LEFT JOIN 
            (
                SELECT u0.UserId, u0.RoleId, u0.CreatedAt, u0.CreatedBy, u0.Id, u0.IsDeleted, u0.UpdatedAt, r.Id AS Id0, r.CreatedAt AS CreatedAt0, r.CreatedBy AS CreatedBy0, r.IsDeleted AS IsDeleted0, r.Name, r.UpdatedAt AS UpdatedAt0
                FROM UserRole AS u0
                INNER JOIN Roles AS r ON u0.RoleId == r.Id
            ) AS s ON u1.Id == s.UserId
            ORDER BY u1.Id ASC, s.UserId ASC, s.RoleId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: [LIFTABLE Constant: ReaderColumn[] { ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<bool>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<int>, ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<int>, ReaderColumn<bool>, ReaderColumn<DateTime>, ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<object>, ReaderColumn<DateTime> } | Resolver: namelessParameter{0} => new ReaderColumn[]
        { 
            new ReaderColumn<int>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(0)
            ), 
            new ReaderColumn<DateTime>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(1)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(2)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Email"), 
                (dataReader, indexMap) => (object)dataReader.GetString(3)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("EmailVerificationCodeExpires"), 
                (dataReader, indexMap) => dataReader.GetDateTime(4)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("EmailVerificationCodeHash"), 
                (dataReader, indexMap) => (object)dataReader.GetString(5)
            ), 
            new ReaderColumn<bool>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(6)
            ), 
            new ReaderColumn<bool>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("IsEmailConfirmed"), 
                (dataReader, indexMap) => dataReader.GetBoolean(7)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("LastVerificationSentAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(8)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Password"), 
                (dataReader, indexMap) => (object)dataReader.GetString(9)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(10)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Username"), 
                (dataReader, indexMap) => (object)dataReader.GetString(11)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("UserId"), 
                (dataReader, indexMap) => dataReader.GetInt32(12)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("RoleId"), 
                (dataReader, indexMap) => dataReader.GetInt32(13)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(14)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(15)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(16)
            ), 
            new ReaderColumn<bool>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(17)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(18)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(19)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(20)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(21)
            ), 
            new ReaderColumn<bool>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(22)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("Name"), 
                (dataReader, indexMap) => (object)dataReader.GetString(23)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(24)
            ) 
        }], 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                User entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    User instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(User);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: User.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (User)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")]: 
                                {
                                    return 
                                    {
                                        User instance;
                                        instance = new User();
                                        instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                        instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(1);
                                        instance.<CreatedBy>k__BackingField = (string)dataReader.GetFieldValue<object>(2);
                                        instance.<Email>k__BackingField = (string)dataReader.GetFieldValue<object>(3);
                                        instance.<EmailVerificationCodeExpires>k__BackingField = dataReader.IsDBNull(4) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(4);
                                        instance.<EmailVerificationCodeHash>k__BackingField = dataReader.IsDBNull(5) ? default(string) : (string)dataReader.GetFieldValue<object>(5);
                                        instance.<IsDeleted>k__BackingField = dataReader.GetBoolean(6);
                                        instance.<IsEmailConfirmed>k__BackingField = dataReader.GetBoolean(7);
                                        instance.<LastVerificationSentAt>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(8);
                                        instance.<Password>k__BackingField = (string)dataReader.GetFieldValue<object>(9);
                                        instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(10) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(10);
                                        instance.<Username>k__BackingField = (string)dataReader.GetFieldValue<object>(11);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(User)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<User, User>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (User)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: User.UserRoles (ICollection<UserRole>) Collection ToDependent UserRole Inverse: User | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindNavigation("UserRoles")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<User, ICollection<UserRole>, UserRole> | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindNavigation("UserRoles").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<User, UserRole>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    (object)dataReader.IsDBNull(12) ? default(int?) : (int?)dataReader.GetInt32(12), 
                    (object)dataReader.IsDBNull(13) ? default(int?) : (int?)dataReader.GetInt32(13), 
                    (object)dataReader.IsDBNull(19) ? default(int?) : (int?)dataReader.GetInt32(19) 
                }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    UserRole entity;
                    Role entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        UserRole instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(UserRole);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: UserRole.UserId, UserRole.RoleId PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindPrimaryKey()], 
                            keyValues: new object[]
                            { 
                                dataReader.IsDBNull(12) ? default(object) : (object)dataReader.GetInt32(12), 
                                dataReader.IsDBNull(13) ? default(object) : (object)dataReader.GetInt32(13) 
                            }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (UserRole)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: UserRole | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: UserRole | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole")]: 
                                    {
                                        return 
                                        {
                                            UserRole instance;
                                            instance = new UserRole();
                                            instance.<UserId>k__BackingField = dataReader.IsDBNull(12) ? default(int) : dataReader.GetInt32(12);
                                            instance.<RoleId>k__BackingField = dataReader.IsDBNull(13) ? default(int) : dataReader.GetInt32(13);
                                            instance.<CreatedAt>k__BackingField = dataReader.IsDBNull(14) ? default(DateTime) : dataReader.GetDateTime(14);
                                            instance.<CreatedBy>k__BackingField = dataReader.IsDBNull(15) ? default(string) : (string)dataReader.GetFieldValue<object>(15);
                                            instance.<Id>k__BackingField = dataReader.IsDBNull(16) ? default(int) : dataReader.GetInt32(16);
                                            instance.<IsDeleted>k__BackingField = dataReader.IsDBNull(17) ? default(bool) : dataReader.GetBoolean(17);
                                            instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(18) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(18);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: UserRole | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(UserRole)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    entity = 
                    {
                        MaterializationContext materializationContext3;
                        IEntityType entityType3;
                        Role instance3;
                        InternalEntityEntry entry3;
                        bool hasNullKey3;
                        materializationContext3 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance3 = default(Role);
                        entry3 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: Role.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindPrimaryKey()], 
                            keyValues: new object[]{ dataReader.IsDBNull(19) ? default(object) : (object)dataReader.GetInt32(19) }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey3);
                        !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
                        {
                            entityType3 = entry3.EntityType;
                            return instance3 = (Role)entry3.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot3;
                            shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType3 = [LIFTABLE Constant: EntityType: Role | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role")];
                            instance3 = switch (entityType3)
                            {
                                case [LIFTABLE Constant: EntityType: Role | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role")]: 
                                    {
                                        return 
                                        {
                                            Role instance;
                                            instance = new Role();
                                            instance.<Id>k__BackingField = dataReader.IsDBNull(19) ? default(int) : dataReader.GetInt32(19);
                                            instance.<CreatedAt>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime) : dataReader.GetDateTime(20);
                                            instance.<CreatedBy>k__BackingField = dataReader.IsDBNull(21) ? default(string) : (string)dataReader.GetFieldValue<object>(21);
                                            instance.<IsDeleted>k__BackingField = dataReader.IsDBNull(22) ? default(bool) : dataReader.GetBoolean(22);
                                            instance.<Name>k__BackingField = dataReader.IsDBNull(23) ? default(string) : (string)dataReader.GetFieldValue<object>(23);
                                            instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(24) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(24);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext3.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: Role | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(Role)
                            }
                            ;
                            entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType3, 
                                entity: instance3, 
                                snapshot: shadowSnapshot3);
                            return instance3;
                        } : default(void);
                        return instance3;
                    };
                    ShaperProcessingExpressionVisitor.IncludeReference<UserRole, UserRole, Role>(
                        queryContext: queryContext, 
                        entity: entity, 
                        relatedEntity: entity, 
                        navigation: [LIFTABLE Constant: Navigation: UserRole.Role (Role) ToPrincipal Role Inverse: UserRoles | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindNavigation("Role")], 
                        inverseNavigation: [LIFTABLE Constant: Navigation: Role.UserRoles (ICollection<UserRole>) Collection ToDependent UserRole Inverse: Role | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindNavigation("UserRoles")], 
                        fixup: (namelessParameter{14}, namelessParameter{15}) => 
                        {
                            namelessParameter{14}.<Role>k__BackingField = namelessParameter{15};
                            return [LIFTABLE Constant: ClrICollectionAccessor<Role, ICollection<UserRole>, UserRole> | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindNavigation("UserRoles").GetCollectionAccessor()].Add(
                                entity: namelessParameter{15}, 
                                value: namelessParameter{14}, 
                                forMaterialization: True);
                        }, 
                        trackingQuery: True);
                    return entity;
                }, 
                inverseNavigation: [LIFTABLE Constant: Navigation: UserRole.User (User) ToPrincipal User Inverse: UserRoles | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindNavigation("User")], 
                fixup: (namelessParameter{18}, namelessParameter{19}) => 
                {
                    [LIFTABLE Constant: ClrICollectionAccessor<User, ICollection<UserRole>, UserRole> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindNavigation("UserRoles").GetCollectionAccessor()].Add(
                        entity: namelessParameter{18}, 
                        value: namelessParameter{19}, 
                        forMaterialization: True);
                    return namelessParameter{19}.<User>k__BackingField = namelessParameter{18};
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (User)(resultContext.Values[0]) : default(User);
        }, 
        contextType: ToDo.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)' 
2025-09-17 14:31:58.0721 | DEBUG | Creating DbConnection. 
2025-09-17 14:31:58.1262 | DEBUG | Created DbConnection. (42ms). 
2025-09-17 14:31:58.1262 | DEBUG | Opening connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 14:31:58.5692 | DEBUG | Opened connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 14:31:58.5692 | DEBUG | Creating DbCommand for 'ExecuteReader'. 
2025-09-17 14:31:58.5952 | DEBUG | Created DbCommand for 'ExecuteReader' (8ms). 
2025-09-17 14:31:58.6132 | DEBUG | Initialized DbCommand for 'ExecuteReader' (37ms). 
2025-09-17 14:31:58.6361 | DEBUG | Executing DbCommand [Parameters=[@__dto_Email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [u1].[Id], [u1].[CreatedAt], [u1].[CreatedBy], [u1].[Email], [u1].[EmailVerificationCodeExpires], [u1].[EmailVerificationCodeHash], [u1].[IsDeleted], [u1].[IsEmailConfirmed], [u1].[LastVerificationSentAt], [u1].[Password], [u1].[UpdatedAt], [u1].[Username], [s].[UserId], [s].[RoleId], [s].[CreatedAt], [s].[CreatedBy], [s].[Id], [s].[IsDeleted], [s].[UpdatedAt], [s].[Id0], [s].[CreatedAt0], [s].[CreatedBy0], [s].[IsDeleted0], [s].[Name], [s].[UpdatedAt0]
FROM (
    SELECT TOP(1) [u].[Id], [u].[CreatedAt], [u].[CreatedBy], [u].[Email], [u].[EmailVerificationCodeExpires], [u].[EmailVerificationCodeHash], [u].[IsDeleted], [u].[IsEmailConfirmed], [u].[LastVerificationSentAt], [u].[Password], [u].[UpdatedAt], [u].[Username]
    FROM [Users] AS [u]
    WHERE [u].[Email] = @__dto_Email_0 AND [u].[IsDeleted] = CAST(0 AS bit) AND [u].[IsDeleted] = CAST(0 AS bit)
) AS [u1]
LEFT JOIN (
    SELECT [u0].[UserId], [u0].[RoleId], [u0].[CreatedAt], [u0].[CreatedBy], [u0].[Id], [u0].[IsDeleted], [u0].[UpdatedAt], [r].[Id] AS [Id0], [r].[CreatedAt] AS [CreatedAt0], [r].[CreatedBy] AS [CreatedBy0], [r].[IsDeleted] AS [IsDeleted0], [r].[Name], [r].[UpdatedAt] AS [UpdatedAt0]
    FROM [UserRole] AS [u0]
    INNER JOIN [Roles] AS [r] ON [u0].[RoleId] = [r].[Id]
) AS [s] ON [u1].[Id] = [s].[UserId]
ORDER BY [u1].[Id], [s].[UserId], [s].[RoleId] 
2025-09-17 14:31:58.9419 | DEBUG | Context 'AppDbContext' started tracking 'User' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 14:31:59.0674 | DEBUG | Closing data reader to 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 14:31:59.0674 | DEBUG | A data reader for 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' is being disposed after spending 195ms reading results. 
2025-09-17 14:31:59.0908 | DEBUG | Closing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 14:31:59.1024 | DEBUG | Closed connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' (11ms). 
2025-09-17 14:31:59.3479 | DEBUG | List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter 
2025-09-17 14:31:59.3479 | DEBUG | No information found on request to perform content negotiation. 
2025-09-17 14:31:59.3479 | DEBUG | Attempting to select an output formatter without using a content type as no explicit content types were specified for the response. 
2025-09-17 14:31:59.3479 | DEBUG | Attempting to select the first formatter in the output formatters list which can write the result. 
2025-09-17 14:31:59.3638 | DEBUG | Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response. 
2025-09-17 14:31:59.3978 | DEBUG | Connection id "0HNFLRN6QGE1N" completed keep alive response. 
2025-09-17 14:31:59.3978 | DEBUG | 'AppDbContext' disposed. 
2025-09-17 14:31:59.3978 | DEBUG | Disposing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 14:31:59.4150 | DEBUG | Disposed connection to database '' on server '' (2ms). 
2025-09-17 14:34:10.5749 | DEBUG | Connection id "0HNFLRN6QGE1N" disconnecting. 
2025-09-17 14:34:10.5749 | DEBUG | Connection id "0HNFLRN6QGE1N" stopped. 
2025-09-17 14:34:10.5788 | DEBUG | Connection id "0HNFLRN6QGE1N" sending FIN because: "The Socket transport's send loop completed gracefully." 
2025-09-17 20:40:52.8590 | DEBUG | Registered model binder providers, in the following order: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider 
2025-09-17 20:40:52.9167 | DEBUG | Hosting starting 
2025-09-17 20:40:52.9270 | DEBUG | Reading data from file 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys\key-cb61fb62-f4ef-41cd-9d69-58589f90bbdb.xml'. 
2025-09-17 20:40:52.9776 | DEBUG | Found key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb}. 
2025-09-17 20:40:52.9886 | DEBUG | Considering key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} with expiration date 2025-12-16 08:29:21Z as default key. 
2025-09-17 20:40:52.9886 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 20:40:52.9886 | DEBUG | Decrypting secret element using Windows DPAPI. 
2025-09-17 20:40:52.9886 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 20:40:52.9886 | DEBUG | Opening CNG algorithm 'AES' from provider '(null)' with chaining mode CBC. 
2025-09-17 20:40:52.9886 | DEBUG | Opening CNG algorithm 'SHA256' from provider '(null)' with HMAC. 
2025-09-17 20:40:52.9886 | DEBUG | Using key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} as the default key. 
2025-09-17 20:40:52.9886 | DEBUG | Key ring with default key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} was loaded during application startup. 
2025-09-17 20:40:53.0008 | DEBUG | Middleware loaded 
2025-09-17 20:40:53.0008 | DEBUG | Middleware loaded. Script /_framework/aspnetcore-browser-refresh.js (16501 B). 
2025-09-17 20:40:53.0008 | DEBUG | Middleware loaded. Script /_framework/blazor-hotreload.js (799 B). 
2025-09-17 20:40:53.0307 | DEBUG | Middleware configuration started with options: {AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True} 
2025-09-17 20:40:53.0307 | DEBUG | Wildcard detected, all requests with hosts will be allowed. 
2025-09-17 20:40:53.0307 | DEBUG | Middleware loaded: DOTNET_MODIFIABLE_ASSEMBLIES=debug, __ASPNETCORE_BROWSER_TOOLS=true 
2025-09-17 20:40:53.0911 | DEBUG | Loaded hosting startup assembly ToDo.API 
2025-09-17 20:40:53.0911 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.ApiEndpointDiscovery 
2025-09-17 20:40:53.0911 | DEBUG | Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh 
2025-09-17 20:40:53.0911 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net 
2025-09-17 20:40:53.0969 | DEBUG | Executing API description provider 'EndpointMetadataApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 20:40:53.0969 | DEBUG | Executing API description provider 'DefaultApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 20:40:53.1245 | DEBUG | Hosting started 
2025-09-17 20:41:36.8267 | DEBUG | Registered model binder providers, in the following order: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider 
2025-09-17 20:41:36.8928 | DEBUG | Hosting starting 
2025-09-17 20:41:36.9070 | DEBUG | Reading data from file 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys\key-cb61fb62-f4ef-41cd-9d69-58589f90bbdb.xml'. 
2025-09-17 20:41:36.9251 | DEBUG | Found key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb}. 
2025-09-17 20:41:36.9251 | DEBUG | Considering key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} with expiration date 2025-12-16 08:29:21Z as default key. 
2025-09-17 20:41:36.9251 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 20:41:36.9377 | DEBUG | Decrypting secret element using Windows DPAPI. 
2025-09-17 20:41:36.9377 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 20:41:36.9377 | DEBUG | Opening CNG algorithm 'AES' from provider '(null)' with chaining mode CBC. 
2025-09-17 20:41:36.9377 | DEBUG | Opening CNG algorithm 'SHA256' from provider '(null)' with HMAC. 
2025-09-17 20:41:36.9377 | DEBUG | Using key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} as the default key. 
2025-09-17 20:41:36.9377 | DEBUG | Key ring with default key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} was loaded during application startup. 
2025-09-17 20:41:36.9377 | DEBUG | Middleware loaded 
2025-09-17 20:41:36.9377 | DEBUG | Middleware loaded. Script /_framework/aspnetcore-browser-refresh.js (16501 B). 
2025-09-17 20:41:36.9377 | DEBUG | Middleware loaded. Script /_framework/blazor-hotreload.js (799 B). 
2025-09-17 20:41:36.9713 | DEBUG | Middleware configuration started with options: {AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True} 
2025-09-17 20:41:36.9713 | DEBUG | Wildcard detected, all requests with hosts will be allowed. 
2025-09-17 20:41:36.9713 | DEBUG | Middleware loaded: DOTNET_MODIFIABLE_ASSEMBLIES=debug, __ASPNETCORE_BROWSER_TOOLS=true 
2025-09-17 20:41:37.0339 | DEBUG | Loaded hosting startup assembly ToDo.API 
2025-09-17 20:41:37.0339 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.ApiEndpointDiscovery 
2025-09-17 20:41:37.0339 | DEBUG | Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh 
2025-09-17 20:41:37.0339 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net 
2025-09-17 20:41:37.0339 | DEBUG | Executing API description provider 'EndpointMetadataApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 20:41:37.0339 | DEBUG | Executing API description provider 'DefaultApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 20:41:37.0639 | DEBUG | Hosting started 
2025-09-17 20:42:14.1890 | DEBUG | Registered model binder providers, in the following order: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider 
2025-09-17 20:42:14.2578 | DEBUG | Hosting starting 
2025-09-17 20:42:14.2814 | DEBUG | Reading data from file 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys\key-cb61fb62-f4ef-41cd-9d69-58589f90bbdb.xml'. 
2025-09-17 20:42:14.2814 | DEBUG | Found key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb}. 
2025-09-17 20:42:14.3085 | DEBUG | Considering key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} with expiration date 2025-12-16 08:29:21Z as default key. 
2025-09-17 20:42:14.3117 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 20:42:14.3117 | DEBUG | Decrypting secret element using Windows DPAPI. 
2025-09-17 20:42:14.3117 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 20:42:14.3117 | DEBUG | Opening CNG algorithm 'AES' from provider '(null)' with chaining mode CBC. 
2025-09-17 20:42:14.3117 | DEBUG | Opening CNG algorithm 'SHA256' from provider '(null)' with HMAC. 
2025-09-17 20:42:14.3117 | DEBUG | Using key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} as the default key. 
2025-09-17 20:42:14.3117 | DEBUG | Key ring with default key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} was loaded during application startup. 
2025-09-17 20:42:14.3276 | DEBUG | Middleware loaded 
2025-09-17 20:42:14.3276 | DEBUG | Middleware loaded. Script /_framework/aspnetcore-browser-refresh.js (16501 B). 
2025-09-17 20:42:14.3276 | DEBUG | Middleware loaded. Script /_framework/blazor-hotreload.js (799 B). 
2025-09-17 20:42:14.3814 | DEBUG | Middleware configuration started with options: {AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True} 
2025-09-17 20:42:14.3814 | DEBUG | Wildcard detected, all requests with hosts will be allowed. 
2025-09-17 20:42:14.3814 | DEBUG | Middleware loaded: DOTNET_MODIFIABLE_ASSEMBLIES=debug, __ASPNETCORE_BROWSER_TOOLS=true 
2025-09-17 20:42:14.4293 | DEBUG | Loaded hosting startup assembly ToDo.API 
2025-09-17 20:42:14.4293 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.ApiEndpointDiscovery 
2025-09-17 20:42:14.4293 | DEBUG | Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh 
2025-09-17 20:42:14.4293 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net 
2025-09-17 20:42:14.4293 | DEBUG | Executing API description provider 'EndpointMetadataApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 20:42:14.4293 | DEBUG | Executing API description provider 'DefaultApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 20:42:14.4579 | DEBUG | Hosting started 
2025-09-17 20:42:56.1109 | DEBUG | Registered model binder providers, in the following order: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider 
2025-09-17 20:42:56.2396 | DEBUG | Hosting starting 
2025-09-17 20:42:56.2495 | DEBUG | Reading data from file 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys\key-cb61fb62-f4ef-41cd-9d69-58589f90bbdb.xml'. 
2025-09-17 20:42:56.2689 | DEBUG | Found key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb}. 
2025-09-17 20:42:56.2876 | DEBUG | Considering key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} with expiration date 2025-12-16 08:29:21Z as default key. 
2025-09-17 20:42:56.2876 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 20:42:56.2876 | DEBUG | Decrypting secret element using Windows DPAPI. 
2025-09-17 20:42:56.2876 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 20:42:56.2988 | DEBUG | Opening CNG algorithm 'AES' from provider '(null)' with chaining mode CBC. 
2025-09-17 20:42:56.2988 | DEBUG | Opening CNG algorithm 'SHA256' from provider '(null)' with HMAC. 
2025-09-17 20:42:56.2988 | DEBUG | Using key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} as the default key. 
2025-09-17 20:42:56.2988 | DEBUG | Key ring with default key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} was loaded during application startup. 
2025-09-17 20:42:56.2988 | DEBUG | Middleware loaded 
2025-09-17 20:42:56.2988 | DEBUG | Middleware loaded. Script /_framework/aspnetcore-browser-refresh.js (16501 B). 
2025-09-17 20:42:56.2988 | DEBUG | Middleware loaded. Script /_framework/blazor-hotreload.js (799 B). 
2025-09-17 20:42:56.3573 | DEBUG | Middleware configuration started with options: {AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True} 
2025-09-17 20:42:56.3573 | DEBUG | Wildcard detected, all requests with hosts will be allowed. 
2025-09-17 20:42:56.3600 | DEBUG | Middleware loaded: DOTNET_MODIFIABLE_ASSEMBLIES=debug, __ASPNETCORE_BROWSER_TOOLS=true 
2025-09-17 20:42:56.3939 | DEBUG | Loaded hosting startup assembly ToDo.API 
2025-09-17 20:42:56.3939 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.ApiEndpointDiscovery 
2025-09-17 20:42:56.3939 | DEBUG | Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh 
2025-09-17 20:42:56.3939 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net 
2025-09-17 20:42:56.3939 | DEBUG | Executing API description provider 'EndpointMetadataApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 20:42:56.4054 | DEBUG | Executing API description provider 'DefaultApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 20:42:56.4588 | DEBUG | Hosting started 
2025-09-17 20:43:16.7612 | DEBUG | Connection id "0HNFM26NG778E" accepted. 
2025-09-17 20:43:16.7612 | DEBUG | Connection id "0HNFM26NG778E" started. 
2025-09-17 20:43:16.8092 | DEBUG | Connection 0HNFM26NG778E established using the following protocol: Tls13 
2025-09-17 20:43:17.0920 | DEBUG | No candidates found for the request path '/' 
2025-09-17 20:43:17.0928 | DEBUG | Request did not match any endpoints 
2025-09-17 20:43:17.1573 | DEBUG | AuthenticationScheme: Bearer was not authenticated. 
2025-09-17 20:43:24.1744 | DEBUG | No candidates found for the request path '/swagger/' 
2025-09-17 20:43:24.1744 | DEBUG | Request did not match any endpoints 
2025-09-17 20:43:24.1911 | DEBUG | No candidates found for the request path '/swagger/index.html' 
2025-09-17 20:43:24.1911 | DEBUG | Request did not match any endpoints 
2025-09-17 20:43:24.2669 | DEBUG | Response markup is scheduled to include Browser Link script injection. 
2025-09-17 20:43:24.2669 | DEBUG | Response markup is scheduled to include browser refresh script injection. 
2025-09-17 20:43:24.2669 | DEBUG | Response markup was updated to include Browser Link script injection. 
2025-09-17 20:43:24.2669 | DEBUG | Response markup was updated to include browser refresh script injection. 
2025-09-17 20:43:24.3408 | DEBUG | No candidates found for the request path '/swagger/swagger-ui.css' 
2025-09-17 20:43:24.3408 | DEBUG | Request did not match any endpoints 
2025-09-17 20:43:24.3408 | DEBUG | No candidates found for the request path '/swagger/index.css' 
2025-09-17 20:43:24.3408 | DEBUG | No candidates found for the request path '/swagger/swagger-ui-bundle.js' 
2025-09-17 20:43:24.3408 | DEBUG | Request did not match any endpoints 
2025-09-17 20:43:24.3408 | DEBUG | Request did not match any endpoints 
2025-09-17 20:43:24.3408 | DEBUG | No candidates found for the request path '/swagger/swagger-ui-standalone-preset.js' 
2025-09-17 20:43:24.3408 | DEBUG | Request did not match any endpoints 
2025-09-17 20:43:24.3408 | DEBUG | No candidates found for the request path '/swagger/index.js' 
2025-09-17 20:43:24.3408 | DEBUG | Request did not match any endpoints 
2025-09-17 20:43:24.3480 | DEBUG | Script injected: /_framework/aspnetcore-browser-refresh.js 
2025-09-17 20:43:25.2994 | DEBUG | No candidates found for the request path '/swagger/v1/swagger.json' 
2025-09-17 20:43:25.2994 | DEBUG | Request did not match any endpoints 
2025-09-17 20:43:25.3149 | DEBUG | No candidates found for the request path '/swagger/favicon-32x32.png' 
2025-09-17 20:43:25.3149 | DEBUG | Request did not match any endpoints 
2025-09-17 20:44:38.8755 | DEBUG | Registered model binder providers, in the following order: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider 
2025-09-17 20:44:38.9497 | DEBUG | Hosting starting 
2025-09-17 20:44:38.9606 | DEBUG | Reading data from file 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys\key-cb61fb62-f4ef-41cd-9d69-58589f90bbdb.xml'. 
2025-09-17 20:44:38.9753 | DEBUG | Found key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb}. 
2025-09-17 20:44:38.9901 | DEBUG | Considering key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} with expiration date 2025-12-16 08:29:21Z as default key. 
2025-09-17 20:44:38.9901 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 20:44:38.9901 | DEBUG | Decrypting secret element using Windows DPAPI. 
2025-09-17 20:44:38.9901 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 20:44:39.0012 | DEBUG | Opening CNG algorithm 'AES' from provider '(null)' with chaining mode CBC. 
2025-09-17 20:44:39.0012 | DEBUG | Opening CNG algorithm 'SHA256' from provider '(null)' with HMAC. 
2025-09-17 20:44:39.0012 | DEBUG | Using key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} as the default key. 
2025-09-17 20:44:39.0012 | DEBUG | Key ring with default key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} was loaded during application startup. 
2025-09-17 20:44:39.0012 | DEBUG | Middleware loaded 
2025-09-17 20:44:39.0012 | DEBUG | Middleware loaded. Script /_framework/aspnetcore-browser-refresh.js (16501 B). 
2025-09-17 20:44:39.0012 | DEBUG | Middleware loaded. Script /_framework/blazor-hotreload.js (799 B). 
2025-09-17 20:44:39.0495 | DEBUG | Middleware configuration started with options: {AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True} 
2025-09-17 20:44:39.0495 | DEBUG | Wildcard detected, all requests with hosts will be allowed. 
2025-09-17 20:44:39.0495 | DEBUG | Middleware loaded: DOTNET_MODIFIABLE_ASSEMBLIES=debug, __ASPNETCORE_BROWSER_TOOLS=true 
2025-09-17 20:44:39.1020 | DEBUG | Loaded hosting startup assembly ToDo.API 
2025-09-17 20:44:39.1204 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.ApiEndpointDiscovery 
2025-09-17 20:44:39.1204 | DEBUG | Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh 
2025-09-17 20:44:39.1204 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net 
2025-09-17 20:44:39.1278 | DEBUG | Executing API description provider 'EndpointMetadataApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 20:44:39.1278 | DEBUG | Executing API description provider 'DefaultApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 20:44:39.1857 | DEBUG | Hosting started 
2025-09-17 20:44:51.7416 | DEBUG | Connection id "0HNFM27JQ12I1" accepted. 
2025-09-17 20:44:51.7416 | DEBUG | Connection id "0HNFM27JQ12I1" started. 
2025-09-17 20:44:51.7826 | DEBUG | Connection 0HNFM27JQ12I1 established using the following protocol: Tls13 
2025-09-17 20:44:51.8311 | DEBUG | Script injected: /_framework/aspnetcore-browser-refresh.js 
2025-09-17 20:44:52.5217 | DEBUG | No candidates found for the request path '/swagger/v1/swagger.json' 
2025-09-17 20:44:52.5217 | DEBUG | Request did not match any endpoints 
2025-09-17 20:45:10.0474 | DEBUG | Script injected: /_framework/aspnetcore-browser-refresh.js 
2025-09-17 20:45:10.1499 | DEBUG | No candidates found for the request path '/swagger/v1/swagger.json' 
2025-09-17 20:45:10.1499 | DEBUG | Request did not match any endpoints 
2025-09-17 20:46:29.7988 | DEBUG | Registered model binder providers, in the following order: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider 
2025-09-17 20:46:29.8776 | DEBUG | Hosting starting 
2025-09-17 20:46:29.8960 | DEBUG | Reading data from file 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys\key-cb61fb62-f4ef-41cd-9d69-58589f90bbdb.xml'. 
2025-09-17 20:46:29.8960 | DEBUG | Found key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb}. 
2025-09-17 20:46:29.9146 | DEBUG | Considering key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} with expiration date 2025-12-16 08:29:21Z as default key. 
2025-09-17 20:46:29.9146 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 20:46:29.9146 | DEBUG | Decrypting secret element using Windows DPAPI. 
2025-09-17 20:46:29.9146 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 20:46:29.9211 | DEBUG | Opening CNG algorithm 'AES' from provider '(null)' with chaining mode CBC. 
2025-09-17 20:46:29.9211 | DEBUG | Opening CNG algorithm 'SHA256' from provider '(null)' with HMAC. 
2025-09-17 20:46:29.9211 | DEBUG | Using key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} as the default key. 
2025-09-17 20:46:29.9211 | DEBUG | Key ring with default key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} was loaded during application startup. 
2025-09-17 20:46:29.9211 | DEBUG | Middleware loaded 
2025-09-17 20:46:29.9211 | DEBUG | Middleware loaded. Script /_framework/aspnetcore-browser-refresh.js (16501 B). 
2025-09-17 20:46:29.9211 | DEBUG | Middleware loaded. Script /_framework/blazor-hotreload.js (799 B). 
2025-09-17 20:46:29.9630 | DEBUG | Middleware configuration started with options: {AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True} 
2025-09-17 20:46:29.9630 | DEBUG | Wildcard detected, all requests with hosts will be allowed. 
2025-09-17 20:46:29.9630 | DEBUG | Middleware loaded: DOTNET_MODIFIABLE_ASSEMBLIES=debug, __ASPNETCORE_BROWSER_TOOLS=true 
2025-09-17 20:46:30.0117 | DEBUG | Loaded hosting startup assembly ToDo.API 
2025-09-17 20:46:30.0117 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.ApiEndpointDiscovery 
2025-09-17 20:46:30.0117 | DEBUG | Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh 
2025-09-17 20:46:30.0117 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net 
2025-09-17 20:46:30.0234 | DEBUG | Executing API description provider 'EndpointMetadataApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 20:46:30.0234 | DEBUG | Executing API description provider 'DefaultApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 20:46:30.0550 | DEBUG | Hosting started 
2025-09-17 20:46:33.0989 | DEBUG | Connection id "0HNFM28I0KQPI" accepted. 
2025-09-17 20:46:33.0989 | DEBUG | Connection id "0HNFM28I0KQPI" started. 
2025-09-17 20:46:33.1467 | DEBUG | Connection 0HNFM28I0KQPI established using the following protocol: Tls13 
2025-09-17 20:46:33.2831 | DEBUG | No candidates found for the request path '/swagger/index.html' 
2025-09-17 20:46:33.2831 | DEBUG | Request did not match any endpoints 
2025-09-17 20:46:33.3403 | DEBUG | Response markup is scheduled to include Browser Link script injection. 
2025-09-17 20:46:33.3403 | DEBUG | Response markup is scheduled to include browser refresh script injection. 
2025-09-17 20:46:33.3436 | DEBUG | Response markup was updated to include Browser Link script injection. 
2025-09-17 20:46:33.3436 | DEBUG | Response markup was updated to include browser refresh script injection. 
2025-09-17 20:46:33.4244 | DEBUG | Script injected: /_framework/aspnetcore-browser-refresh.js 
2025-09-17 20:46:33.5592 | DEBUG | No candidates found for the request path '/swagger/v1/swagger.json' 
2025-09-17 20:46:33.5592 | DEBUG | Request did not match any endpoints 
2025-09-17 20:46:57.1021 | DEBUG | Connection id "0HNFM28I0KQPI" received FIN. 
2025-09-17 20:46:57.1021 | DEBUG | The connection queue processing loop for 0HNFM28I0KQPI completed. 
2025-09-17 20:46:57.1111 | DEBUG | Connection id "0HNFM28I0KQPI" is closed. The last processed stream ID was 7. 
2025-09-17 20:46:57.1111 | DEBUG | Connection id "0HNFM28I0KQPI" sending FIN because: "The Socket transport's send loop completed gracefully." 
2025-09-17 20:46:57.1250 | DEBUG | Connection id "0HNFM28I0KQPI" stopped. 
2025-09-17 20:47:23.7020 | DEBUG | Connection id "0HNFM28I0KQPJ" accepted. 
2025-09-17 20:47:23.7028 | DEBUG | Connection id "0HNFM28I0KQPJ" started. 
2025-09-17 20:47:23.7028 | DEBUG | Connection id "0HNFM28I0KQPJ" received FIN. 
2025-09-17 20:47:23.7028 | DEBUG | Connection id "0HNFM28I0KQPK" accepted. 
2025-09-17 20:47:23.7028 | DEBUG | Connection id "0HNFM28I0KQPK" started. 
2025-09-17 20:47:23.7028 | DEBUG | Failed to authenticate HTTPS connection. System.IO.IOException: Received an unexpected EOF or 0 bytes from the transport stream.
   at System.Net.Security.SslStream.ReceiveHandshakeFrameAsync[TIOAdapter](CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.OnConnectionAsync(ConnectionContext context)
2025-09-17 20:47:23.7028 | DEBUG | Connection id "0HNFM28I0KQPJ" stopped. 
2025-09-17 20:47:23.7028 | DEBUG | Connection id "0HNFM28I0KQPJ" sending FIN because: "The Socket transport's send loop completed gracefully." 
2025-09-17 20:47:23.7186 | DEBUG | Connection 0HNFM28I0KQPK established using the following protocol: Tls13 
2025-09-17 20:47:23.7186 | DEBUG | 1 candidate(s) found for the request path '/api/user/login' 
2025-09-17 20:47:23.7186 | DEBUG | Endpoint 'ToDo.API.Controllers.UserController.Login (ToDo.API)' with route pattern 'api/User/login' is valid for the request path '/api/user/login' 
2025-09-17 20:47:23.7337 | DEBUG | Request matched endpoint 'ToDo.API.Controllers.UserController.Login (ToDo.API)' 
2025-09-17 20:47:23.7337 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000001": started reading request body. 
2025-09-17 20:47:23.7337 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000001": done reading request body. 
2025-09-17 20:47:23.7766 | DEBUG | AuthenticationScheme: Bearer was not authenticated. 
2025-09-17 20:47:23.8060 | DEBUG | Execution plan of authorization filters (in the following order): None 
2025-09-17 20:47:23.8060 | DEBUG | Execution plan of resource filters (in the following order): None 
2025-09-17 20:47:23.8060 | DEBUG | Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000) 
2025-09-17 20:47:23.8060 | DEBUG | Execution plan of exception filters (in the following order): None 
2025-09-17 20:47:23.8060 | DEBUG | Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000) 
2025-09-17 20:47:23.8060 | DEBUG | Executing controller factory for controller ToDo.API.Controllers.UserController (ToDo.API) 
2025-09-17 20:47:23.9287 | DEBUG | An 'IServiceProvider' was created for internal use by Entity Framework. 
2025-09-17 20:47:24.3206 | DEBUG | The index {'UserId'} was not created on entity type 'UserRole' as the properties are already covered by the index {'UserId', 'RoleId'}. 
2025-09-17 20:47:24.5068 | DEBUG | Entity Framework Core 9.0.8 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.8' with options: MigrationsAssembly=ToDo.Data EngineType=SqlServer  
2025-09-17 20:47:24.5068 | DEBUG | Executed controller factory for controller ToDo.API.Controllers.UserController (ToDo.API) 
2025-09-17 20:47:24.5068 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' ... 
2025-09-17 20:47:24.5068 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' using the name '' in request data ... 
2025-09-17 20:47:24.5068 | DEBUG | Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'. 
2025-09-17 20:47:24.5211 | DEBUG | JSON input formatter succeeded, deserializing to type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' 
2025-09-17 20:47:24.5211 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:47:24.5211 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:47:24.5211 | DEBUG | Attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' ... 
2025-09-17 20:47:24.5309 | DEBUG | Done attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:47:24.6167 | DEBUG | Compiling query expression: 
'DbSet<User>()
    .Where(u => u.Email == __dto_Email_0 && !(u.IsDeleted))
    .Where(e => !(e.IsDeleted))
    .Include("UserRoles")
    .Include("UserRoles.Role")
    .FirstOrDefault()' 
2025-09-17 20:47:24.6572 | DEBUG | Including navigation: 'User.UserRoles'. 
2025-09-17 20:47:24.6748 | DEBUG | Including navigation: 'UserRole.Role'. 
2025-09-17 20:47:24.9546 | DEBUG | Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<User>(
    asyncEnumerable: SingleQueryingEnumerable.Create<User>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: User.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: User.CreatedAt (DateTime) Required, 1], [Property: User.CreatedBy (string) Required, 2], [Property: User.Email (string) Required, 3], [Property: User.EmailVerificationCodeExpires (DateTime?), 4], [Property: User.EmailVerificationCodeHash (string), 5], [Property: User.IsDeleted (bool) Required, 6], [Property: User.IsEmailConfirmed (bool) Required, 7], [Property: User.LastVerificationSentAt (DateTime?), 8], [Property: User.Password (string) Required, 9], [Property: User.UpdatedAt (DateTime?), 10], [Property: User.Username (string) Required MaxLength(50), 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: UserRole.UserId (int) Required PK FK AfterSave:Throw, 12], [Property: UserRole.RoleId (int) Required PK FK Index AfterSave:Throw, 13], [Property: UserRole.CreatedAt (DateTime) Required, 14], [Property: UserRole.CreatedBy (string) Required, 15], [Property: UserRole.Id (int) Required ValueGenerated.OnAdd, 16], [Property: UserRole.IsDeleted (bool) Required, 17], [Property: UserRole.UpdatedAt (DateTime?), 18] }
                3 -> Dictionary<IProperty, int> { [Property: Role.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 19], [Property: Role.CreatedAt (DateTime) Required, 20], [Property: Role.CreatedBy (string) Required, 21], [Property: Role.IsDeleted (bool) Required, 22], [Property: Role.Name (string) Required, 23], [Property: Role.UpdatedAt (DateTime?), 24] }
                4 -> 12
                5 -> 13
                6 -> 19
            SELECT u1.Id, u1.CreatedAt, u1.CreatedBy, u1.Email, u1.EmailVerificationCodeExpires, u1.EmailVerificationCodeHash, u1.IsDeleted, u1.IsEmailConfirmed, u1.LastVerificationSentAt, u1.Password, u1.UpdatedAt, u1.Username, s.UserId, s.RoleId, s.CreatedAt, s.CreatedBy, s.Id, s.IsDeleted, s.UpdatedAt, s.Id0, s.CreatedAt0, s.CreatedBy0, s.IsDeleted0, s.Name, s.UpdatedAt0
            FROM 
            (
                SELECT TOP(1) u.Id, u.CreatedAt, u.CreatedBy, u.Email, u.EmailVerificationCodeExpires, u.EmailVerificationCodeHash, u.IsDeleted, u.IsEmailConfirmed, u.LastVerificationSentAt, u.Password, u.UpdatedAt, u.Username
                FROM Users AS u
                WHERE ((u.Email == @__dto_Email_0) && Not(u.IsDeleted)) && Not(u.IsDeleted)
            ) AS u1
            LEFT JOIN 
            (
                SELECT u0.UserId, u0.RoleId, u0.CreatedAt, u0.CreatedBy, u0.Id, u0.IsDeleted, u0.UpdatedAt, r.Id AS Id0, r.CreatedAt AS CreatedAt0, r.CreatedBy AS CreatedBy0, r.IsDeleted AS IsDeleted0, r.Name, r.UpdatedAt AS UpdatedAt0
                FROM UserRole AS u0
                INNER JOIN Roles AS r ON u0.RoleId == r.Id
            ) AS s ON u1.Id == s.UserId
            ORDER BY u1.Id ASC, s.UserId ASC, s.RoleId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: User.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: User.CreatedAt (DateTime) Required, 1], [Property: User.CreatedBy (string) Required, 2], [Property: User.Email (string) Required, 3], [Property: User.EmailVerificationCodeExpires (DateTime?), 4], [Property: User.EmailVerificationCodeHash (string), 5], [Property: User.IsDeleted (bool) Required, 6], [Property: User.IsEmailConfirmed (bool) Required, 7], [Property: User.LastVerificationSentAt (DateTime?), 8], [Property: User.Password (string) Required, 9], [Property: User.UpdatedAt (DateTime?), 10], [Property: User.Username (string) Required MaxLength(50), 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: UserRole.UserId (int) Required PK FK AfterSave:Throw, 12], [Property: UserRole.RoleId (int) Required PK FK Index AfterSave:Throw, 13], [Property: UserRole.CreatedAt (DateTime) Required, 14], [Property: UserRole.CreatedBy (string) Required, 15], [Property: UserRole.Id (int) Required ValueGenerated.OnAdd, 16], [Property: UserRole.IsDeleted (bool) Required, 17], [Property: UserRole.UpdatedAt (DateTime?), 18] }
                3 -> Dictionary<IProperty, int> { [Property: Role.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 19], [Property: Role.CreatedAt (DateTime) Required, 20], [Property: Role.CreatedBy (string) Required, 21], [Property: Role.IsDeleted (bool) Required, 22], [Property: Role.Name (string) Required, 23], [Property: Role.UpdatedAt (DateTime?), 24] }
                4 -> 12
                5 -> 13
                6 -> 19
            SELECT u1.Id, u1.CreatedAt, u1.CreatedBy, u1.Email, u1.EmailVerificationCodeExpires, u1.EmailVerificationCodeHash, u1.IsDeleted, u1.IsEmailConfirmed, u1.LastVerificationSentAt, u1.Password, u1.UpdatedAt, u1.Username, s.UserId, s.RoleId, s.CreatedAt, s.CreatedBy, s.Id, s.IsDeleted, s.UpdatedAt, s.Id0, s.CreatedAt0, s.CreatedBy0, s.IsDeleted0, s.Name, s.UpdatedAt0
            FROM 
            (
                SELECT TOP(1) u.Id, u.CreatedAt, u.CreatedBy, u.Email, u.EmailVerificationCodeExpires, u.EmailVerificationCodeHash, u.IsDeleted, u.IsEmailConfirmed, u.LastVerificationSentAt, u.Password, u.UpdatedAt, u.Username
                FROM Users AS u
                WHERE ((u.Email == @__dto_Email_0) && Not(u.IsDeleted)) && Not(u.IsDeleted)
            ) AS u1
            LEFT JOIN 
            (
                SELECT u0.UserId, u0.RoleId, u0.CreatedAt, u0.CreatedBy, u0.Id, u0.IsDeleted, u0.UpdatedAt, r.Id AS Id0, r.CreatedAt AS CreatedAt0, r.CreatedBy AS CreatedBy0, r.IsDeleted AS IsDeleted0, r.Name, r.UpdatedAt AS UpdatedAt0
                FROM UserRole AS u0
                INNER JOIN Roles AS r ON u0.RoleId == r.Id
            ) AS s ON u1.Id == s.UserId
            ORDER BY u1.Id ASC, s.UserId ASC, s.RoleId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: [LIFTABLE Constant: ReaderColumn[] { ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<bool>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<int>, ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<int>, ReaderColumn<bool>, ReaderColumn<DateTime>, ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<object>, ReaderColumn<DateTime> } | Resolver: namelessParameter{0} => new ReaderColumn[]
        { 
            new ReaderColumn<int>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(0)
            ), 
            new ReaderColumn<DateTime>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(1)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(2)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Email"), 
                (dataReader, indexMap) => (object)dataReader.GetString(3)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("EmailVerificationCodeExpires"), 
                (dataReader, indexMap) => dataReader.GetDateTime(4)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("EmailVerificationCodeHash"), 
                (dataReader, indexMap) => (object)dataReader.GetString(5)
            ), 
            new ReaderColumn<bool>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(6)
            ), 
            new ReaderColumn<bool>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("IsEmailConfirmed"), 
                (dataReader, indexMap) => dataReader.GetBoolean(7)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("LastVerificationSentAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(8)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Password"), 
                (dataReader, indexMap) => (object)dataReader.GetString(9)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(10)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Username"), 
                (dataReader, indexMap) => (object)dataReader.GetString(11)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("UserId"), 
                (dataReader, indexMap) => dataReader.GetInt32(12)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("RoleId"), 
                (dataReader, indexMap) => dataReader.GetInt32(13)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(14)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(15)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(16)
            ), 
            new ReaderColumn<bool>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(17)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(18)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(19)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(20)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(21)
            ), 
            new ReaderColumn<bool>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(22)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("Name"), 
                (dataReader, indexMap) => (object)dataReader.GetString(23)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(24)
            ) 
        }], 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                User entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    User instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(User);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: User.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (User)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")]: 
                                {
                                    return 
                                    {
                                        User instance;
                                        instance = new User();
                                        instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                        instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(1);
                                        instance.<CreatedBy>k__BackingField = (string)dataReader.GetFieldValue<object>(2);
                                        instance.<Email>k__BackingField = (string)dataReader.GetFieldValue<object>(3);
                                        instance.<EmailVerificationCodeExpires>k__BackingField = dataReader.IsDBNull(4) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(4);
                                        instance.<EmailVerificationCodeHash>k__BackingField = dataReader.IsDBNull(5) ? default(string) : (string)dataReader.GetFieldValue<object>(5);
                                        instance.<IsDeleted>k__BackingField = dataReader.GetBoolean(6);
                                        instance.<IsEmailConfirmed>k__BackingField = dataReader.GetBoolean(7);
                                        instance.<LastVerificationSentAt>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(8);
                                        instance.<Password>k__BackingField = (string)dataReader.GetFieldValue<object>(9);
                                        instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(10) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(10);
                                        instance.<Username>k__BackingField = (string)dataReader.GetFieldValue<object>(11);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(User)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<User, User>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (User)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: User.UserRoles (ICollection<UserRole>) Collection ToDependent UserRole Inverse: User | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindNavigation("UserRoles")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<User, ICollection<UserRole>, UserRole> | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindNavigation("UserRoles").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<User, UserRole>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    (object)dataReader.IsDBNull(12) ? default(int?) : (int?)dataReader.GetInt32(12), 
                    (object)dataReader.IsDBNull(13) ? default(int?) : (int?)dataReader.GetInt32(13), 
                    (object)dataReader.IsDBNull(19) ? default(int?) : (int?)dataReader.GetInt32(19) 
                }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    UserRole entity;
                    Role entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        UserRole instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(UserRole);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: UserRole.UserId, UserRole.RoleId PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindPrimaryKey()], 
                            keyValues: new object[]
                            { 
                                dataReader.IsDBNull(12) ? default(object) : (object)dataReader.GetInt32(12), 
                                dataReader.IsDBNull(13) ? default(object) : (object)dataReader.GetInt32(13) 
                            }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (UserRole)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: UserRole | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: UserRole | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole")]: 
                                    {
                                        return 
                                        {
                                            UserRole instance;
                                            instance = new UserRole();
                                            instance.<UserId>k__BackingField = dataReader.IsDBNull(12) ? default(int) : dataReader.GetInt32(12);
                                            instance.<RoleId>k__BackingField = dataReader.IsDBNull(13) ? default(int) : dataReader.GetInt32(13);
                                            instance.<CreatedAt>k__BackingField = dataReader.IsDBNull(14) ? default(DateTime) : dataReader.GetDateTime(14);
                                            instance.<CreatedBy>k__BackingField = dataReader.IsDBNull(15) ? default(string) : (string)dataReader.GetFieldValue<object>(15);
                                            instance.<Id>k__BackingField = dataReader.IsDBNull(16) ? default(int) : dataReader.GetInt32(16);
                                            instance.<IsDeleted>k__BackingField = dataReader.IsDBNull(17) ? default(bool) : dataReader.GetBoolean(17);
                                            instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(18) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(18);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: UserRole | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(UserRole)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    entity = 
                    {
                        MaterializationContext materializationContext3;
                        IEntityType entityType3;
                        Role instance3;
                        InternalEntityEntry entry3;
                        bool hasNullKey3;
                        materializationContext3 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance3 = default(Role);
                        entry3 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: Role.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindPrimaryKey()], 
                            keyValues: new object[]{ dataReader.IsDBNull(19) ? default(object) : (object)dataReader.GetInt32(19) }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey3);
                        !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
                        {
                            entityType3 = entry3.EntityType;
                            return instance3 = (Role)entry3.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot3;
                            shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType3 = [LIFTABLE Constant: EntityType: Role | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role")];
                            instance3 = switch (entityType3)
                            {
                                case [LIFTABLE Constant: EntityType: Role | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role")]: 
                                    {
                                        return 
                                        {
                                            Role instance;
                                            instance = new Role();
                                            instance.<Id>k__BackingField = dataReader.IsDBNull(19) ? default(int) : dataReader.GetInt32(19);
                                            instance.<CreatedAt>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime) : dataReader.GetDateTime(20);
                                            instance.<CreatedBy>k__BackingField = dataReader.IsDBNull(21) ? default(string) : (string)dataReader.GetFieldValue<object>(21);
                                            instance.<IsDeleted>k__BackingField = dataReader.IsDBNull(22) ? default(bool) : dataReader.GetBoolean(22);
                                            instance.<Name>k__BackingField = dataReader.IsDBNull(23) ? default(string) : (string)dataReader.GetFieldValue<object>(23);
                                            instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(24) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(24);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext3.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: Role | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(Role)
                            }
                            ;
                            entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType3, 
                                entity: instance3, 
                                snapshot: shadowSnapshot3);
                            return instance3;
                        } : default(void);
                        return instance3;
                    };
                    ShaperProcessingExpressionVisitor.IncludeReference<UserRole, UserRole, Role>(
                        queryContext: queryContext, 
                        entity: entity, 
                        relatedEntity: entity, 
                        navigation: [LIFTABLE Constant: Navigation: UserRole.Role (Role) ToPrincipal Role Inverse: UserRoles | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindNavigation("Role")], 
                        inverseNavigation: [LIFTABLE Constant: Navigation: Role.UserRoles (ICollection<UserRole>) Collection ToDependent UserRole Inverse: Role | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindNavigation("UserRoles")], 
                        fixup: (namelessParameter{14}, namelessParameter{15}) => 
                        {
                            namelessParameter{14}.<Role>k__BackingField = namelessParameter{15};
                            return [LIFTABLE Constant: ClrICollectionAccessor<Role, ICollection<UserRole>, UserRole> | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindNavigation("UserRoles").GetCollectionAccessor()].Add(
                                entity: namelessParameter{15}, 
                                value: namelessParameter{14}, 
                                forMaterialization: True);
                        }, 
                        trackingQuery: True);
                    return entity;
                }, 
                inverseNavigation: [LIFTABLE Constant: Navigation: UserRole.User (User) ToPrincipal User Inverse: UserRoles | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindNavigation("User")], 
                fixup: (namelessParameter{18}, namelessParameter{19}) => 
                {
                    [LIFTABLE Constant: ClrICollectionAccessor<User, ICollection<UserRole>, UserRole> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindNavigation("UserRoles").GetCollectionAccessor()].Add(
                        entity: namelessParameter{18}, 
                        value: namelessParameter{19}, 
                        forMaterialization: True);
                    return namelessParameter{19}.<User>k__BackingField = namelessParameter{18};
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (User)(resultContext.Values[0]) : default(User);
        }, 
        contextType: ToDo.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)' 
2025-09-17 20:47:25.0011 | DEBUG | Creating DbConnection. 
2025-09-17 20:47:25.0218 | DEBUG | Created DbConnection. (18ms). 
2025-09-17 20:47:25.0218 | DEBUG | Opening connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:47:25.2279 | DEBUG | Opened connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:47:25.2279 | DEBUG | Creating DbCommand for 'ExecuteReader'. 
2025-09-17 20:47:25.2279 | DEBUG | Created DbCommand for 'ExecuteReader' (2ms). 
2025-09-17 20:47:25.2400 | DEBUG | Initialized DbCommand for 'ExecuteReader' (10ms). 
2025-09-17 20:47:25.2400 | DEBUG | Executing DbCommand [Parameters=[@__dto_Email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [u1].[Id], [u1].[CreatedAt], [u1].[CreatedBy], [u1].[Email], [u1].[EmailVerificationCodeExpires], [u1].[EmailVerificationCodeHash], [u1].[IsDeleted], [u1].[IsEmailConfirmed], [u1].[LastVerificationSentAt], [u1].[Password], [u1].[UpdatedAt], [u1].[Username], [s].[UserId], [s].[RoleId], [s].[CreatedAt], [s].[CreatedBy], [s].[Id], [s].[IsDeleted], [s].[UpdatedAt], [s].[Id0], [s].[CreatedAt0], [s].[CreatedBy0], [s].[IsDeleted0], [s].[Name], [s].[UpdatedAt0]
FROM (
    SELECT TOP(1) [u].[Id], [u].[CreatedAt], [u].[CreatedBy], [u].[Email], [u].[EmailVerificationCodeExpires], [u].[EmailVerificationCodeHash], [u].[IsDeleted], [u].[IsEmailConfirmed], [u].[LastVerificationSentAt], [u].[Password], [u].[UpdatedAt], [u].[Username]
    FROM [Users] AS [u]
    WHERE [u].[Email] = @__dto_Email_0 AND [u].[IsDeleted] = CAST(0 AS bit) AND [u].[IsDeleted] = CAST(0 AS bit)
) AS [u1]
LEFT JOIN (
    SELECT [u0].[UserId], [u0].[RoleId], [u0].[CreatedAt], [u0].[CreatedBy], [u0].[Id], [u0].[IsDeleted], [u0].[UpdatedAt], [r].[Id] AS [Id0], [r].[CreatedAt] AS [CreatedAt0], [r].[CreatedBy] AS [CreatedBy0], [r].[IsDeleted] AS [IsDeleted0], [r].[Name], [r].[UpdatedAt] AS [UpdatedAt0]
    FROM [UserRole] AS [u0]
    INNER JOIN [Roles] AS [r] ON [u0].[RoleId] = [r].[Id]
) AS [s] ON [u1].[Id] = [s].[UserId]
ORDER BY [u1].[Id], [s].[UserId], [s].[RoleId] 
2025-09-17 20:47:25.4018 | DEBUG | Context 'AppDbContext' started tracking 'User' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 20:47:25.4365 | DEBUG | Closing data reader to 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:47:25.4411 | DEBUG | A data reader for 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' is being disposed after spending 57ms reading results. 
2025-09-17 20:47:25.4411 | DEBUG | Closing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:47:25.4411 | DEBUG | Closed connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' (3ms). 
2025-09-17 20:47:25.5205 | DEBUG | List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter 
2025-09-17 20:47:25.5205 | DEBUG | No information found on request to perform content negotiation. 
2025-09-17 20:47:25.5205 | DEBUG | Attempting to select an output formatter without using a content type as no explicit content types were specified for the response. 
2025-09-17 20:47:25.5205 | DEBUG | Attempting to select the first formatter in the output formatters list which can write the result. 
2025-09-17 20:47:25.5205 | DEBUG | Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response. 
2025-09-17 20:47:25.5342 | DEBUG | Connection id "0HNFM28I0KQPK" completed keep alive response. 
2025-09-17 20:47:25.5342 | DEBUG | 'AppDbContext' disposed. 
2025-09-17 20:47:25.5342 | DEBUG | Disposing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:47:25.5342 | DEBUG | Disposed connection to database '' on server '' (0ms). 
2025-09-17 20:47:30.7803 | DEBUG | 1 candidate(s) found for the request path '/api/user/login' 
2025-09-17 20:47:30.7803 | DEBUG | Endpoint 'ToDo.API.Controllers.UserController.Login (ToDo.API)' with route pattern 'api/User/login' is valid for the request path '/api/user/login' 
2025-09-17 20:47:30.7803 | DEBUG | Request matched endpoint 'ToDo.API.Controllers.UserController.Login (ToDo.API)' 
2025-09-17 20:47:30.7803 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000002": started reading request body. 
2025-09-17 20:47:30.7803 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000002": done reading request body. 
2025-09-17 20:47:30.7803 | DEBUG | AuthenticationScheme: Bearer was not authenticated. 
2025-09-17 20:47:30.7803 | DEBUG | Execution plan of authorization filters (in the following order): None 
2025-09-17 20:47:30.7803 | DEBUG | Execution plan of resource filters (in the following order): None 
2025-09-17 20:47:30.7803 | DEBUG | Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000) 
2025-09-17 20:47:30.7803 | DEBUG | Execution plan of exception filters (in the following order): None 
2025-09-17 20:47:30.7803 | DEBUG | Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000) 
2025-09-17 20:47:30.7803 | DEBUG | Executing controller factory for controller ToDo.API.Controllers.UserController (ToDo.API) 
2025-09-17 20:47:30.8156 | DEBUG | Entity Framework Core 9.0.8 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.8' with options: MigrationsAssembly=ToDo.Data EngineType=SqlServer  
2025-09-17 20:47:30.8156 | DEBUG | Executed controller factory for controller ToDo.API.Controllers.UserController (ToDo.API) 
2025-09-17 20:47:30.8156 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' ... 
2025-09-17 20:47:30.8156 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' using the name '' in request data ... 
2025-09-17 20:47:30.8156 | DEBUG | Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'. 
2025-09-17 20:47:30.8156 | DEBUG | JSON input formatter succeeded, deserializing to type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' 
2025-09-17 20:47:30.8156 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:47:30.8156 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:47:30.8156 | DEBUG | Attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' ... 
2025-09-17 20:47:30.8156 | DEBUG | Done attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:47:30.8321 | DEBUG | Creating DbConnection. 
2025-09-17 20:47:30.8321 | DEBUG | Created DbConnection. (0ms). 
2025-09-17 20:47:30.8321 | DEBUG | Opening connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:47:30.8321 | DEBUG | Opened connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:47:30.8321 | DEBUG | Creating DbCommand for 'ExecuteReader'. 
2025-09-17 20:47:30.8321 | DEBUG | Created DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:47:30.8321 | DEBUG | Initialized DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:47:30.8321 | DEBUG | Executing DbCommand [Parameters=[@__dto_Email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [u1].[Id], [u1].[CreatedAt], [u1].[CreatedBy], [u1].[Email], [u1].[EmailVerificationCodeExpires], [u1].[EmailVerificationCodeHash], [u1].[IsDeleted], [u1].[IsEmailConfirmed], [u1].[LastVerificationSentAt], [u1].[Password], [u1].[UpdatedAt], [u1].[Username], [s].[UserId], [s].[RoleId], [s].[CreatedAt], [s].[CreatedBy], [s].[Id], [s].[IsDeleted], [s].[UpdatedAt], [s].[Id0], [s].[CreatedAt0], [s].[CreatedBy0], [s].[IsDeleted0], [s].[Name], [s].[UpdatedAt0]
FROM (
    SELECT TOP(1) [u].[Id], [u].[CreatedAt], [u].[CreatedBy], [u].[Email], [u].[EmailVerificationCodeExpires], [u].[EmailVerificationCodeHash], [u].[IsDeleted], [u].[IsEmailConfirmed], [u].[LastVerificationSentAt], [u].[Password], [u].[UpdatedAt], [u].[Username]
    FROM [Users] AS [u]
    WHERE [u].[Email] = @__dto_Email_0 AND [u].[IsDeleted] = CAST(0 AS bit) AND [u].[IsDeleted] = CAST(0 AS bit)
) AS [u1]
LEFT JOIN (
    SELECT [u0].[UserId], [u0].[RoleId], [u0].[CreatedAt], [u0].[CreatedBy], [u0].[Id], [u0].[IsDeleted], [u0].[UpdatedAt], [r].[Id] AS [Id0], [r].[CreatedAt] AS [CreatedAt0], [r].[CreatedBy] AS [CreatedBy0], [r].[IsDeleted] AS [IsDeleted0], [r].[Name], [r].[UpdatedAt] AS [UpdatedAt0]
    FROM [UserRole] AS [u0]
    INNER JOIN [Roles] AS [r] ON [u0].[RoleId] = [r].[Id]
) AS [s] ON [u1].[Id] = [s].[UserId]
ORDER BY [u1].[Id], [s].[UserId], [s].[RoleId] 
2025-09-17 20:47:30.8483 | DEBUG | Context 'AppDbContext' started tracking 'User' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 20:47:30.8483 | DEBUG | Closing data reader to 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:47:30.8483 | DEBUG | A data reader for 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' is being disposed after spending 1ms reading results. 
2025-09-17 20:47:30.8483 | DEBUG | Closing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:47:30.8483 | DEBUG | Closed connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' (0ms). 
2025-09-17 20:47:31.0485 | DEBUG | List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter 
2025-09-17 20:47:31.0485 | DEBUG | No information found on request to perform content negotiation. 
2025-09-17 20:47:31.0485 | DEBUG | Attempting to select an output formatter without using a content type as no explicit content types were specified for the response. 
2025-09-17 20:47:31.0485 | DEBUG | Attempting to select the first formatter in the output formatters list which can write the result. 
2025-09-17 20:47:31.0485 | DEBUG | Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response. 
2025-09-17 20:47:31.0613 | DEBUG | Connection id "0HNFM28I0KQPK" completed keep alive response. 
2025-09-17 20:47:31.0613 | DEBUG | 'AppDbContext' disposed. 
2025-09-17 20:47:31.0613 | DEBUG | Disposing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:47:31.0613 | DEBUG | Disposed connection to database '' on server '' (0ms). 
2025-09-17 20:47:49.0330 | DEBUG | No candidates found for the request path '/api/ToDo' 
2025-09-17 20:47:49.0330 | DEBUG | Request did not match any endpoints 
2025-09-17 20:47:49.0330 | DEBUG | AuthenticationScheme: Bearer was not authenticated. 
2025-09-17 20:47:49.0461 | DEBUG | Connection id "0HNFM28I0KQPK" completed keep alive response. 
2025-09-17 20:47:49.0461 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000003": started reading request body. 
2025-09-17 20:47:49.0461 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000003": done reading request body. 
2025-09-17 20:48:08.2876 | DEBUG | 1 candidate(s) found for the request path '/api/ToDos' 
2025-09-17 20:48:08.2876 | DEBUG | Endpoint 'ToDo.API.Controllers.ToDosController.GetAllToDos (ToDo.API)' with route pattern 'api/ToDos' is valid for the request path '/api/ToDos' 
2025-09-17 20:48:08.2876 | DEBUG | Request matched endpoint 'ToDo.API.Controllers.ToDosController.GetAllToDos (ToDo.API)' 
2025-09-17 20:48:08.2876 | DEBUG | AuthenticationScheme: Bearer was not authenticated. 
2025-09-17 20:48:08.2968 | DEBUG | Execution plan of authorization filters (in the following order): None 
2025-09-17 20:48:08.2968 | DEBUG | Execution plan of resource filters (in the following order): None 
2025-09-17 20:48:08.2968 | DEBUG | Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000) 
2025-09-17 20:48:08.2968 | DEBUG | Execution plan of exception filters (in the following order): None 
2025-09-17 20:48:08.2968 | DEBUG | Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000) 
2025-09-17 20:48:08.2968 | DEBUG | Executing controller factory for controller ToDo.API.Controllers.ToDosController (ToDo.API) 
2025-09-17 20:48:08.3652 | DEBUG | Entity Framework Core 9.0.8 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.8' with options: MigrationsAssembly=ToDo.Data EngineType=SqlServer  
2025-09-17 20:48:08.4086 | DEBUG | Executed controller factory for controller ToDo.API.Controllers.ToDosController (ToDo.API) 
2025-09-17 20:48:08.4086 | DEBUG | List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter 
2025-09-17 20:48:08.4086 | DEBUG | No information found on request to perform content negotiation. 
2025-09-17 20:48:08.4086 | DEBUG | Attempting to select an output formatter without using a content type as no explicit content types were specified for the response. 
2025-09-17 20:48:08.4086 | DEBUG | Attempting to select the first formatter in the output formatters list which can write the result. 
2025-09-17 20:48:08.4086 | DEBUG | Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter' and content type 'text/plain' to write the response. 
2025-09-17 20:48:08.4086 | DEBUG | Connection id "0HNFM28I0KQPK" completed keep alive response. 
2025-09-17 20:48:08.4086 | DEBUG | 'AppDbContext' disposed. 
2025-09-17 20:48:08.4086 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000004": started reading request body. 
2025-09-17 20:48:08.4086 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000004": done reading request body. 
2025-09-17 20:48:24.7002 | DEBUG | 1 candidate(s) found for the request path '/api/ToDos' 
2025-09-17 20:48:24.7002 | DEBUG | Endpoint 'ToDo.API.Controllers.ToDosController.GetAllToDos (ToDo.API)' with route pattern 'api/ToDos' is valid for the request path '/api/ToDos' 
2025-09-17 20:48:24.7017 | DEBUG | Request matched endpoint 'ToDo.API.Controllers.ToDosController.GetAllToDos (ToDo.API)' 
2025-09-17 20:48:24.7295 | DEBUG | Execution plan of authorization filters (in the following order): None 
2025-09-17 20:48:24.7295 | DEBUG | Execution plan of resource filters (in the following order): None 
2025-09-17 20:48:24.7295 | DEBUG | Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000) 
2025-09-17 20:48:24.7295 | DEBUG | Execution plan of exception filters (in the following order): None 
2025-09-17 20:48:24.7295 | DEBUG | Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000) 
2025-09-17 20:48:24.7295 | DEBUG | Executing controller factory for controller ToDo.API.Controllers.ToDosController (ToDo.API) 
2025-09-17 20:48:24.7338 | DEBUG | Entity Framework Core 9.0.8 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.8' with options: MigrationsAssembly=ToDo.Data EngineType=SqlServer  
2025-09-17 20:48:24.7338 | DEBUG | Executed controller factory for controller ToDo.API.Controllers.ToDosController (ToDo.API) 
2025-09-17 20:48:24.7338 | DEBUG | List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter 
2025-09-17 20:48:24.7338 | DEBUG | No information found on request to perform content negotiation. 
2025-09-17 20:48:24.7338 | DEBUG | Attempting to select an output formatter without using a content type as no explicit content types were specified for the response. 
2025-09-17 20:48:24.7338 | DEBUG | Attempting to select the first formatter in the output formatters list which can write the result. 
2025-09-17 20:48:24.7338 | DEBUG | Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter' and content type 'text/plain' to write the response. 
2025-09-17 20:48:24.7338 | DEBUG | Connection id "0HNFM28I0KQPK" completed keep alive response. 
2025-09-17 20:48:24.7338 | DEBUG | 'AppDbContext' disposed. 
2025-09-17 20:48:24.7338 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000005": started reading request body. 
2025-09-17 20:48:24.7338 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000005": done reading request body. 
2025-09-17 20:48:58.5522 | DEBUG | 1 candidate(s) found for the request path '/api/user/login' 
2025-09-17 20:48:58.5522 | DEBUG | Request matched endpoint '405 HTTP Method Not Supported' 
2025-09-17 20:48:58.5522 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000006": started reading request body. 
2025-09-17 20:48:58.5522 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000006": done reading request body. 
2025-09-17 20:48:58.5522 | DEBUG | Connection id "0HNFM28I0KQPK" completed keep alive response. 
2025-09-17 20:49:03.4932 | DEBUG | 1 candidate(s) found for the request path '/api/user/login' 
2025-09-17 20:49:03.4932 | DEBUG | Endpoint 'ToDo.API.Controllers.UserController.Login (ToDo.API)' with route pattern 'api/User/login' is valid for the request path '/api/user/login' 
2025-09-17 20:49:03.4932 | DEBUG | Request matched endpoint 'ToDo.API.Controllers.UserController.Login (ToDo.API)' 
2025-09-17 20:49:03.4932 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000007": started reading request body. 
2025-09-17 20:49:03.4932 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000007": done reading request body. 
2025-09-17 20:49:03.5192 | DEBUG | Execution plan of authorization filters (in the following order): None 
2025-09-17 20:49:03.5192 | DEBUG | Execution plan of resource filters (in the following order): None 
2025-09-17 20:49:03.5192 | DEBUG | Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000) 
2025-09-17 20:49:03.5192 | DEBUG | Execution plan of exception filters (in the following order): None 
2025-09-17 20:49:03.5192 | DEBUG | Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000) 
2025-09-17 20:49:03.5192 | DEBUG | Executing controller factory for controller ToDo.API.Controllers.UserController (ToDo.API) 
2025-09-17 20:49:03.5192 | DEBUG | Entity Framework Core 9.0.8 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.8' with options: MigrationsAssembly=ToDo.Data EngineType=SqlServer  
2025-09-17 20:49:03.5192 | DEBUG | Executed controller factory for controller ToDo.API.Controllers.UserController (ToDo.API) 
2025-09-17 20:49:03.5192 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' ... 
2025-09-17 20:49:03.5192 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' using the name '' in request data ... 
2025-09-17 20:49:03.5192 | DEBUG | Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'. 
2025-09-17 20:49:03.5192 | DEBUG | JSON input formatter succeeded, deserializing to type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' 
2025-09-17 20:49:03.5192 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:49:03.5192 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:49:03.5192 | DEBUG | Attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' ... 
2025-09-17 20:49:03.5192 | DEBUG | Done attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:49:03.5469 | DEBUG | Creating DbConnection. 
2025-09-17 20:49:03.5469 | DEBUG | Created DbConnection. (0ms). 
2025-09-17 20:49:03.5469 | DEBUG | Opening connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:03.5469 | DEBUG | Opened connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:03.5469 | DEBUG | Creating DbCommand for 'ExecuteReader'. 
2025-09-17 20:49:03.5469 | DEBUG | Created DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:49:03.5469 | DEBUG | Initialized DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:49:03.5469 | DEBUG | Executing DbCommand [Parameters=[@__dto_Email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [u1].[Id], [u1].[CreatedAt], [u1].[CreatedBy], [u1].[Email], [u1].[EmailVerificationCodeExpires], [u1].[EmailVerificationCodeHash], [u1].[IsDeleted], [u1].[IsEmailConfirmed], [u1].[LastVerificationSentAt], [u1].[Password], [u1].[UpdatedAt], [u1].[Username], [s].[UserId], [s].[RoleId], [s].[CreatedAt], [s].[CreatedBy], [s].[Id], [s].[IsDeleted], [s].[UpdatedAt], [s].[Id0], [s].[CreatedAt0], [s].[CreatedBy0], [s].[IsDeleted0], [s].[Name], [s].[UpdatedAt0]
FROM (
    SELECT TOP(1) [u].[Id], [u].[CreatedAt], [u].[CreatedBy], [u].[Email], [u].[EmailVerificationCodeExpires], [u].[EmailVerificationCodeHash], [u].[IsDeleted], [u].[IsEmailConfirmed], [u].[LastVerificationSentAt], [u].[Password], [u].[UpdatedAt], [u].[Username]
    FROM [Users] AS [u]
    WHERE [u].[Email] = @__dto_Email_0 AND [u].[IsDeleted] = CAST(0 AS bit) AND [u].[IsDeleted] = CAST(0 AS bit)
) AS [u1]
LEFT JOIN (
    SELECT [u0].[UserId], [u0].[RoleId], [u0].[CreatedAt], [u0].[CreatedBy], [u0].[Id], [u0].[IsDeleted], [u0].[UpdatedAt], [r].[Id] AS [Id0], [r].[CreatedAt] AS [CreatedAt0], [r].[CreatedBy] AS [CreatedBy0], [r].[IsDeleted] AS [IsDeleted0], [r].[Name], [r].[UpdatedAt] AS [UpdatedAt0]
    FROM [UserRole] AS [u0]
    INNER JOIN [Roles] AS [r] ON [u0].[RoleId] = [r].[Id]
) AS [s] ON [u1].[Id] = [s].[UserId]
ORDER BY [u1].[Id], [s].[UserId], [s].[RoleId] 
2025-09-17 20:49:03.5677 | DEBUG | Context 'AppDbContext' started tracking 'User' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 20:49:03.5677 | DEBUG | Closing data reader to 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:03.5677 | DEBUG | A data reader for 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' is being disposed after spending 0ms reading results. 
2025-09-17 20:49:03.5677 | DEBUG | Closing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:03.5677 | DEBUG | Closed connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' (0ms). 
2025-09-17 20:49:03.7003 | DEBUG | List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter 
2025-09-17 20:49:03.7003 | DEBUG | No information found on request to perform content negotiation. 
2025-09-17 20:49:03.7003 | DEBUG | Attempting to select an output formatter without using a content type as no explicit content types were specified for the response. 
2025-09-17 20:49:03.7003 | DEBUG | Attempting to select the first formatter in the output formatters list which can write the result. 
2025-09-17 20:49:03.7003 | DEBUG | Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response. 
2025-09-17 20:49:03.7003 | DEBUG | Connection id "0HNFM28I0KQPK" completed keep alive response. 
2025-09-17 20:49:03.7003 | DEBUG | 'AppDbContext' disposed. 
2025-09-17 20:49:03.7003 | DEBUG | Disposing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:03.7003 | DEBUG | Disposed connection to database '' on server '' (0ms). 
2025-09-17 20:49:17.9074 | DEBUG | 1 candidate(s) found for the request path '/api/user/login' 
2025-09-17 20:49:17.9074 | DEBUG | Endpoint 'ToDo.API.Controllers.UserController.Login (ToDo.API)' with route pattern 'api/User/login' is valid for the request path '/api/user/login' 
2025-09-17 20:49:17.9074 | DEBUG | Request matched endpoint 'ToDo.API.Controllers.UserController.Login (ToDo.API)' 
2025-09-17 20:49:17.9074 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000008": started reading request body. 
2025-09-17 20:49:17.9074 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000008": done reading request body. 
2025-09-17 20:49:17.9454 | DEBUG | Successfully validated the token. 
2025-09-17 20:49:17.9454 | DEBUG | AuthenticationScheme: Bearer was successfully authenticated. 
2025-09-17 20:49:17.9454 | DEBUG | Execution plan of authorization filters (in the following order): None 
2025-09-17 20:49:17.9454 | DEBUG | Execution plan of resource filters (in the following order): None 
2025-09-17 20:49:17.9454 | DEBUG | Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000) 
2025-09-17 20:49:17.9454 | DEBUG | Execution plan of exception filters (in the following order): None 
2025-09-17 20:49:17.9454 | DEBUG | Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000) 
2025-09-17 20:49:17.9454 | DEBUG | Executing controller factory for controller ToDo.API.Controllers.UserController (ToDo.API) 
2025-09-17 20:49:17.9454 | DEBUG | Entity Framework Core 9.0.8 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.8' with options: MigrationsAssembly=ToDo.Data EngineType=SqlServer  
2025-09-17 20:49:17.9454 | DEBUG | Executed controller factory for controller ToDo.API.Controllers.UserController (ToDo.API) 
2025-09-17 20:49:17.9454 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' ... 
2025-09-17 20:49:17.9454 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' using the name '' in request data ... 
2025-09-17 20:49:17.9454 | DEBUG | Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'. 
2025-09-17 20:49:17.9454 | DEBUG | JSON input formatter succeeded, deserializing to type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' 
2025-09-17 20:49:17.9454 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:49:17.9454 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:49:17.9454 | DEBUG | Attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' ... 
2025-09-17 20:49:17.9454 | DEBUG | Done attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:49:17.9454 | DEBUG | Creating DbConnection. 
2025-09-17 20:49:17.9454 | DEBUG | Created DbConnection. (0ms). 
2025-09-17 20:49:17.9454 | DEBUG | Opening connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:17.9454 | DEBUG | Opened connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:17.9454 | DEBUG | Creating DbCommand for 'ExecuteReader'. 
2025-09-17 20:49:17.9454 | DEBUG | Created DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:49:17.9454 | DEBUG | Initialized DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:49:17.9454 | DEBUG | Executing DbCommand [Parameters=[@__dto_Email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [u1].[Id], [u1].[CreatedAt], [u1].[CreatedBy], [u1].[Email], [u1].[EmailVerificationCodeExpires], [u1].[EmailVerificationCodeHash], [u1].[IsDeleted], [u1].[IsEmailConfirmed], [u1].[LastVerificationSentAt], [u1].[Password], [u1].[UpdatedAt], [u1].[Username], [s].[UserId], [s].[RoleId], [s].[CreatedAt], [s].[CreatedBy], [s].[Id], [s].[IsDeleted], [s].[UpdatedAt], [s].[Id0], [s].[CreatedAt0], [s].[CreatedBy0], [s].[IsDeleted0], [s].[Name], [s].[UpdatedAt0]
FROM (
    SELECT TOP(1) [u].[Id], [u].[CreatedAt], [u].[CreatedBy], [u].[Email], [u].[EmailVerificationCodeExpires], [u].[EmailVerificationCodeHash], [u].[IsDeleted], [u].[IsEmailConfirmed], [u].[LastVerificationSentAt], [u].[Password], [u].[UpdatedAt], [u].[Username]
    FROM [Users] AS [u]
    WHERE [u].[Email] = @__dto_Email_0 AND [u].[IsDeleted] = CAST(0 AS bit) AND [u].[IsDeleted] = CAST(0 AS bit)
) AS [u1]
LEFT JOIN (
    SELECT [u0].[UserId], [u0].[RoleId], [u0].[CreatedAt], [u0].[CreatedBy], [u0].[Id], [u0].[IsDeleted], [u0].[UpdatedAt], [r].[Id] AS [Id0], [r].[CreatedAt] AS [CreatedAt0], [r].[CreatedBy] AS [CreatedBy0], [r].[IsDeleted] AS [IsDeleted0], [r].[Name], [r].[UpdatedAt] AS [UpdatedAt0]
    FROM [UserRole] AS [u0]
    INNER JOIN [Roles] AS [r] ON [u0].[RoleId] = [r].[Id]
) AS [s] ON [u1].[Id] = [s].[UserId]
ORDER BY [u1].[Id], [s].[UserId], [s].[RoleId] 
2025-09-17 20:49:17.9619 | DEBUG | Context 'AppDbContext' started tracking 'User' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 20:49:17.9619 | DEBUG | Closing data reader to 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:17.9619 | DEBUG | A data reader for 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' is being disposed after spending 0ms reading results. 
2025-09-17 20:49:17.9619 | DEBUG | Closing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:17.9619 | DEBUG | Closed connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' (0ms). 
2025-09-17 20:49:18.1075 | DEBUG | List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter 
2025-09-17 20:49:18.1075 | DEBUG | No information found on request to perform content negotiation. 
2025-09-17 20:49:18.1079 | DEBUG | Attempting to select an output formatter without using a content type as no explicit content types were specified for the response. 
2025-09-17 20:49:18.1079 | DEBUG | Attempting to select the first formatter in the output formatters list which can write the result. 
2025-09-17 20:49:18.1079 | DEBUG | Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response. 
2025-09-17 20:49:18.1079 | DEBUG | Connection id "0HNFM28I0KQPK" completed keep alive response. 
2025-09-17 20:49:18.1079 | DEBUG | 'AppDbContext' disposed. 
2025-09-17 20:49:18.1079 | DEBUG | Disposing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:18.1079 | DEBUG | Disposed connection to database '' on server '' (0ms). 
2025-09-17 20:49:41.9782 | DEBUG | 1 candidate(s) found for the request path '/api/ToDos' 
2025-09-17 20:49:41.9782 | DEBUG | Endpoint 'ToDo.API.Controllers.ToDosController.GetAllToDos (ToDo.API)' with route pattern 'api/ToDos' is valid for the request path '/api/ToDos' 
2025-09-17 20:49:41.9782 | DEBUG | Request matched endpoint 'ToDo.API.Controllers.ToDosController.GetAllToDos (ToDo.API)' 
2025-09-17 20:49:41.9782 | DEBUG | Successfully validated the token. 
2025-09-17 20:49:41.9831 | DEBUG | AuthenticationScheme: Bearer was successfully authenticated. 
2025-09-17 20:49:41.9831 | DEBUG | Execution plan of authorization filters (in the following order): None 
2025-09-17 20:49:41.9831 | DEBUG | Execution plan of resource filters (in the following order): None 
2025-09-17 20:49:41.9831 | DEBUG | Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000) 
2025-09-17 20:49:41.9831 | DEBUG | Execution plan of exception filters (in the following order): None 
2025-09-17 20:49:41.9831 | DEBUG | Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000) 
2025-09-17 20:49:41.9831 | DEBUG | Executing controller factory for controller ToDo.API.Controllers.ToDosController (ToDo.API) 
2025-09-17 20:49:41.9831 | DEBUG | Entity Framework Core 9.0.8 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.8' with options: MigrationsAssembly=ToDo.Data EngineType=SqlServer  
2025-09-17 20:49:41.9831 | DEBUG | Executed controller factory for controller ToDo.API.Controllers.ToDosController (ToDo.API) 
2025-09-17 20:49:42.0235 | DEBUG | Compiling query expression: 
'DbSet<ToDos>()
    .Where(t => t.UserId == __userId_Value_0)
    .Where(e => !(e.IsDeleted))
    .Include("User")
    .Where(x => x.IsDeleted == False)
    .Include("SubTasks")
    .Where(x => x.IsDeleted == False)' 
2025-09-17 20:49:42.0235 | DEBUG | Including navigation: 'ToDos.User'. 
2025-09-17 20:49:42.0235 | DEBUG | Including navigation: 'ToDos.SubTasks'. 
2025-09-17 20:49:42.1049 | DEBUG | Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<ToDos>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: ToDos.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: ToDos.CreatedAt (DateTime) Required, 1], [Property: ToDos.CreatedBy (string) Required, 2], [Property: ToDos.Description (string) Required MaxLength(500), 3], [Property: ToDos.IsDeleted (bool) Required, 4], [Property: ToDos.Status (TaskStatuss) Required, 5], [Property: ToDos.Title (string) Required MaxLength(200), 6], [Property: ToDos.ToDoAt (DateOnly?) Required, 7], [Property: ToDos.UpdatedAt (DateTime?), 8], [Property: ToDos.UserId (int) Required FK Index, 9] }
            1 -> Dictionary<IProperty, int> { [Property: User.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 10], [Property: User.CreatedAt (DateTime) Required, 11], [Property: User.CreatedBy (string) Required, 12], [Property: User.Email (string) Required, 13], [Property: User.EmailVerificationCodeExpires (DateTime?), 14], [Property: User.EmailVerificationCodeHash (string), 15], [Property: User.IsDeleted (bool) Required, 16], [Property: User.IsEmailConfirmed (bool) Required, 17], [Property: User.LastVerificationSentAt (DateTime?), 18], [Property: User.Password (string) Required, 19], [Property: User.UpdatedAt (DateTime?), 20], [Property: User.Username (string) Required MaxLength(50), 21] }
            2 -> 0
            3 -> 10
            4 -> Dictionary<IProperty, int> { [Property: SubTask.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 22], [Property: SubTask.CreatedAt (DateTime) Required, 23], [Property: SubTask.CreatedBy (string) Required, 24], [Property: SubTask.IsDeleted (bool) Required, 25], [Property: SubTask.Status (TaskStatuss) Required MaxLength(20), 26], [Property: SubTask.Title (string) Required MaxLength(255), 27], [Property: SubTask.ToDoId (int) Required FK Index, 28], [Property: SubTask.UpdatedAt (DateTime?), 29] }
            5 -> 22
        SELECT t.Id, t.CreatedAt, t.CreatedBy, t.Description, t.IsDeleted, t.Status, t.Title, t.ToDoAt, t.UpdatedAt, t.UserId, u.Id, u.CreatedAt, u.CreatedBy, u.Email, u.EmailVerificationCodeExpires, u.EmailVerificationCodeHash, u.IsDeleted, u.IsEmailConfirmed, u.LastVerificationSentAt, u.Password, u.UpdatedAt, u.Username, s.Id, s.CreatedAt, s.CreatedBy, s.IsDeleted, s.Status, s.Title, s.ToDoId, s.UpdatedAt
        FROM ToDos AS t
        INNER JOIN Users AS u ON t.UserId == u.Id
        LEFT JOIN SubTasks AS s ON t.Id == s.ToDoId
        WHERE (((t.UserId == @__userId_Value_0) && Not(t.IsDeleted)) && (t.IsDeleted == CAST(0 AS bit))) && (t.IsDeleted == CAST(0 AS bit))
        ORDER BY t.Id ASC, u.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: ToDos.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: ToDos.CreatedAt (DateTime) Required, 1], [Property: ToDos.CreatedBy (string) Required, 2], [Property: ToDos.Description (string) Required MaxLength(500), 3], [Property: ToDos.IsDeleted (bool) Required, 4], [Property: ToDos.Status (TaskStatuss) Required, 5], [Property: ToDos.Title (string) Required MaxLength(200), 6], [Property: ToDos.ToDoAt (DateOnly?) Required, 7], [Property: ToDos.UpdatedAt (DateTime?), 8], [Property: ToDos.UserId (int) Required FK Index, 9] }
            1 -> Dictionary<IProperty, int> { [Property: User.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 10], [Property: User.CreatedAt (DateTime) Required, 11], [Property: User.CreatedBy (string) Required, 12], [Property: User.Email (string) Required, 13], [Property: User.EmailVerificationCodeExpires (DateTime?), 14], [Property: User.EmailVerificationCodeHash (string), 15], [Property: User.IsDeleted (bool) Required, 16], [Property: User.IsEmailConfirmed (bool) Required, 17], [Property: User.LastVerificationSentAt (DateTime?), 18], [Property: User.Password (string) Required, 19], [Property: User.UpdatedAt (DateTime?), 20], [Property: User.Username (string) Required MaxLength(50), 21] }
            2 -> 0
            3 -> 10
            4 -> Dictionary<IProperty, int> { [Property: SubTask.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 22], [Property: SubTask.CreatedAt (DateTime) Required, 23], [Property: SubTask.CreatedBy (string) Required, 24], [Property: SubTask.IsDeleted (bool) Required, 25], [Property: SubTask.Status (TaskStatuss) Required MaxLength(20), 26], [Property: SubTask.Title (string) Required MaxLength(255), 27], [Property: SubTask.ToDoId (int) Required FK Index, 28], [Property: SubTask.UpdatedAt (DateTime?), 29] }
            5 -> 22
        SELECT t.Id, t.CreatedAt, t.CreatedBy, t.Description, t.IsDeleted, t.Status, t.Title, t.ToDoAt, t.UpdatedAt, t.UserId, u.Id, u.CreatedAt, u.CreatedBy, u.Email, u.EmailVerificationCodeExpires, u.EmailVerificationCodeHash, u.IsDeleted, u.IsEmailConfirmed, u.LastVerificationSentAt, u.Password, u.UpdatedAt, u.Username, s.Id, s.CreatedAt, s.CreatedBy, s.IsDeleted, s.Status, s.Title, s.ToDoId, s.UpdatedAt
        FROM ToDos AS t
        INNER JOIN Users AS u ON t.UserId == u.Id
        LEFT JOIN SubTasks AS s ON t.Id == s.ToDoId
        WHERE (((t.UserId == @__userId_Value_0) && Not(t.IsDeleted)) && (t.IsDeleted == CAST(0 AS bit))) && (t.IsDeleted == CAST(0 AS bit))
        ORDER BY t.Id ASC, u.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: [LIFTABLE Constant: ReaderColumn[] { ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<int>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<int>, ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<bool>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<int>, ReaderColumn<DateTime> } | Resolver: namelessParameter{0} => new ReaderColumn[]
    { 
        new ReaderColumn<int>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Id"), 
            (dataReader, indexMap) => dataReader.GetInt32(0)
        ), 
        new ReaderColumn<DateTime>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("CreatedAt"), 
            (dataReader, indexMap) => dataReader.GetDateTime(1)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("CreatedBy"), 
            (dataReader, indexMap) => (object)dataReader.GetString(2)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Description"), 
            (dataReader, indexMap) => (object)dataReader.GetString(3)
        ), 
        new ReaderColumn<bool>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("IsDeleted"), 
            (dataReader, indexMap) => dataReader.GetBoolean(4)
        ), 
        new ReaderColumn<int>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Status"), 
            (dataReader, indexMap) => dataReader.GetInt32(5)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Title"), 
            (dataReader, indexMap) => (object)dataReader.GetString(6)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("ToDoAt"), 
            (dataReader, indexMap) => (object)dataReader.GetFieldValue<DateOnly>(7)
        ), 
        new ReaderColumn<DateTime>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("UpdatedAt"), 
            (dataReader, indexMap) => dataReader.GetDateTime(8)
        ), 
        new ReaderColumn<int>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("UserId"), 
            (dataReader, indexMap) => dataReader.GetInt32(9)
        ), 
        new ReaderColumn<int>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Id"), 
            (dataReader, indexMap) => dataReader.GetInt32(10)
        ), 
        new ReaderColumn<DateTime>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("CreatedAt"), 
            (dataReader, indexMap) => dataReader.GetDateTime(11)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("CreatedBy"), 
            (dataReader, indexMap) => (object)dataReader.GetString(12)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Email"), 
            (dataReader, indexMap) => (object)dataReader.GetString(13)
        ), 
        new ReaderColumn<DateTime>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("EmailVerificationCodeExpires"), 
            (dataReader, indexMap) => dataReader.GetDateTime(14)
        ), 
        new ReaderColumn<object>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("EmailVerificationCodeHash"), 
            (dataReader, indexMap) => (object)dataReader.GetString(15)
        ), 
        new ReaderColumn<bool>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("IsDeleted"), 
            (dataReader, indexMap) => dataReader.GetBoolean(16)
        ), 
        new ReaderColumn<bool>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("IsEmailConfirmed"), 
            (dataReader, indexMap) => dataReader.GetBoolean(17)
        ), 
        new ReaderColumn<DateTime>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("LastVerificationSentAt"), 
            (dataReader, indexMap) => dataReader.GetDateTime(18)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Password"), 
            (dataReader, indexMap) => (object)dataReader.GetString(19)
        ), 
        new ReaderColumn<DateTime>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("UpdatedAt"), 
            (dataReader, indexMap) => dataReader.GetDateTime(20)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Username"), 
            (dataReader, indexMap) => (object)dataReader.GetString(21)
        ), 
        new ReaderColumn<int>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("Id"), 
            (dataReader, indexMap) => dataReader.GetInt32(22)
        ), 
        new ReaderColumn<DateTime>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("CreatedAt"), 
            (dataReader, indexMap) => dataReader.GetDateTime(23)
        ), 
        new ReaderColumn<object>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("CreatedBy"), 
            (dataReader, indexMap) => (object)dataReader.GetString(24)
        ), 
        new ReaderColumn<bool>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("IsDeleted"), 
            (dataReader, indexMap) => dataReader.GetBoolean(25)
        ), 
        new ReaderColumn<object>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("Status"), 
            (dataReader, indexMap) => (object)dataReader.GetString(26)
        ), 
        new ReaderColumn<object>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("Title"), 
            (dataReader, indexMap) => (object)dataReader.GetString(27)
        ), 
        new ReaderColumn<int>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("ToDoId"), 
            (dataReader, indexMap) => dataReader.GetInt32(28)
        ), 
        new ReaderColumn<DateTime>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("UpdatedAt"), 
            (dataReader, indexMap) => dataReader.GetDateTime(29)
        ) 
    }], 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            ToDos entity;
            User entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                ToDos instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(ToDos);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: ToDos.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (ToDos)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: ToDos | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: ToDos | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos")]: 
                            {
                                return 
                                {
                                    ToDos instance;
                                    instance = new ToDos();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(1);
                                    instance.<CreatedBy>k__BackingField = (string)dataReader.GetFieldValue<object>(2);
                                    instance.<Description>k__BackingField = (string)dataReader.GetFieldValue<object>(3);
                                    instance.<IsDeleted>k__BackingField = dataReader.GetBoolean(4);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<TaskStatuss, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: ToDos.Status (TaskStatuss) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(5));
                                    instance.<Title>k__BackingField = (string)dataReader.GetFieldValue<object>(6);
                                    instance.<ToDoAt>k__BackingField = (DateOnly?)(DateOnly)dataReader.GetFieldValue<object>(7);
                                    instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(8);
                                    instance.<UserId>k__BackingField = dataReader.GetInt32(9);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: ToDos | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(ToDos)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            entity = 
            {
                MaterializationContext materializationContext2;
                IEntityType entityType2;
                User instance2;
                InternalEntityEntry entry2;
                bool hasNullKey2;
                materializationContext2 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance2 = default(User);
                entry2 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: User.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(10) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey2);
                !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                {
                    entityType2 = entry2.EntityType;
                    return instance2 = (User)entry2.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot2;
                    shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType2 = [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")];
                    instance2 = switch (entityType2)
                    {
                        case [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")]: 
                            {
                                return 
                                {
                                    User instance;
                                    instance = new User();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(10);
                                    instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(11);
                                    instance.<CreatedBy>k__BackingField = (string)dataReader.GetFieldValue<object>(12);
                                    instance.<Email>k__BackingField = (string)dataReader.GetFieldValue<object>(13);
                                    instance.<EmailVerificationCodeExpires>k__BackingField = dataReader.IsDBNull(14) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(14);
                                    instance.<EmailVerificationCodeHash>k__BackingField = dataReader.IsDBNull(15) ? default(string) : (string)dataReader.GetFieldValue<object>(15);
                                    instance.<IsDeleted>k__BackingField = dataReader.GetBoolean(16);
                                    instance.<IsEmailConfirmed>k__BackingField = dataReader.GetBoolean(17);
                                    instance.<LastVerificationSentAt>k__BackingField = dataReader.IsDBNull(18) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(18);
                                    instance.<Password>k__BackingField = (string)dataReader.GetFieldValue<object>(19);
                                    instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(20);
                                    instance.<Username>k__BackingField = (string)dataReader.GetFieldValue<object>(21);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext2.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(User)
                    }
                    ;
                    entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType2, 
                        entity: instance2, 
                        snapshot: shadowSnapshot2);
                    return instance2;
                } : default(void);
                return instance2;
            };
            resultContext.Values = new object[]
            { 
                entity, 
                entity 
            };
            ShaperProcessingExpressionVisitor.IncludeReference<ToDos, ToDos, User>(
                queryContext: queryContext, 
                entity: (ToDos)(resultContext.Values[0]), 
                relatedEntity: (User)(resultContext.Values[1]), 
                navigation: [LIFTABLE Constant: Navigation: ToDos.User (User) ToPrincipal User | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindNavigation("User")], 
                inverseNavigation: default(INavigation), 
                fixup: (namelessParameter{9}, namelessParameter{10}) => 
                {
                    return namelessParameter{9}.<User>k__BackingField = namelessParameter{10};
                }, 
                trackingQuery: True);
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<ToDos, ToDos>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (ToDos)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    (object)(int?)dataReader.GetInt32(0), 
                    (object)(int?)dataReader.GetInt32(10) 
                }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    (object)(int?)dataReader.GetInt32(0), 
                    (object)(int?)dataReader.GetInt32(10) 
                }], 
                navigation: [LIFTABLE Constant: Navigation: ToDos.SubTasks (ICollection<SubTask>) Collection ToDependent SubTask Inverse: ToDo | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindNavigation("SubTasks")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<ToDos, ICollection<SubTask>, SubTask> | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindNavigation("SubTasks").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<ToDos, SubTask>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
            { 
                (object)(int?)dataReader.GetInt32(0), 
                (object)(int?)dataReader.GetInt32(10) 
            }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
            { 
                (object)(int?)dataReader.GetInt32(0), 
                (object)(int?)dataReader.GetInt32(10) 
            }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(22) ? default(int?) : (int?)dataReader.GetInt32(22) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
            { 
                (left, right) => left == null ? right == null : right != null && (int)left == (int)right, 
                (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
            }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
            { 
                (left, right) => left == null ? right == null : right != null && (int)left == (int)right, 
                (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
            }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                SubTask entity;
                entity = 
                {
                    MaterializationContext materializationContext3;
                    IEntityType entityType3;
                    SubTask instance3;
                    InternalEntityEntry entry3;
                    bool hasNullKey3;
                    materializationContext3 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance3 = default(SubTask);
                    entry3 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: SubTask.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(22) ? default(object) : (object)dataReader.GetInt32(22) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey3);
                    !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
                    {
                        entityType3 = entry3.EntityType;
                        return instance3 = (SubTask)entry3.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot3;
                        shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType3 = [LIFTABLE Constant: EntityType: SubTask | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask")];
                        instance3 = switch (entityType3)
                        {
                            case [LIFTABLE Constant: EntityType: SubTask | Resolver: namelessParameter{14} => namelessParameter{14}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask")]: 
                                {
                                    return 
                                    {
                                        SubTask instance;
                                        instance = new SubTask();
                                        instance.<Id>k__BackingField = dataReader.IsDBNull(22) ? default(int) : dataReader.GetInt32(22);
                                        instance.<CreatedAt>k__BackingField = dataReader.IsDBNull(23) ? default(DateTime) : dataReader.GetDateTime(23);
                                        instance.<CreatedBy>k__BackingField = dataReader.IsDBNull(24) ? default(string) : (string)dataReader.GetFieldValue<object>(24);
                                        instance.<IsDeleted>k__BackingField = dataReader.IsDBNull(25) ? default(bool) : dataReader.GetBoolean(25);
                                        instance.<Status>k__BackingField = dataReader.IsDBNull(26) ? default(TaskStatuss) : Invoke(((EnumToStringConverter<TaskStatuss>)((IReadOnlyProperty)[LIFTABLE Constant: Property: SubTask.Status (TaskStatuss) Required MaxLength(20) | Resolver: namelessParameter{15} => namelessParameter{15}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, (string)dataReader.GetFieldValue<object>(26));
                                        instance.<Title>k__BackingField = dataReader.IsDBNull(27) ? default(string) : (string)dataReader.GetFieldValue<object>(27);
                                        instance.<ToDoId>k__BackingField = dataReader.IsDBNull(28) ? default(int) : dataReader.GetInt32(28);
                                        instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(29) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(29);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext3.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: SubTask | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(SubTask)
                        }
                        ;
                        entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType3, 
                            entity: instance3, 
                            snapshot: shadowSnapshot3);
                        return instance3;
                    } : default(void);
                    return instance3;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: SubTask.ToDo (ToDos) ToPrincipal ToDos Inverse: SubTasks | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindNavigation("ToDo")], 
            fixup: (namelessParameter{18}, namelessParameter{19}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<ToDos, ICollection<SubTask>, SubTask> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindNavigation("SubTasks").GetCollectionAccessor()].Add(
                    entity: namelessParameter{18}, 
                    value: namelessParameter{19}, 
                    forMaterialization: True);
                return namelessParameter{19}.<ToDo>k__BackingField = namelessParameter{18};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (ToDos)(resultContext.Values[0]) : default(ToDos);
    }, 
    contextType: ToDo.Data.AppDbContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)' 
2025-09-17 20:49:42.1129 | DEBUG | Creating DbConnection. 
2025-09-17 20:49:42.1129 | DEBUG | Created DbConnection. (0ms). 
2025-09-17 20:49:42.1129 | DEBUG | Opening connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:42.1129 | DEBUG | Opened connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:42.1129 | DEBUG | Creating DbCommand for 'ExecuteReader'. 
2025-09-17 20:49:42.1129 | DEBUG | Created DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:49:42.1129 | DEBUG | Initialized DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:49:42.1129 | DEBUG | Executing DbCommand [Parameters=[@__userId_Value_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[CreatedAt], [t].[CreatedBy], [t].[Description], [t].[IsDeleted], [t].[Status], [t].[Title], [t].[ToDoAt], [t].[UpdatedAt], [t].[UserId], [u].[Id], [u].[CreatedAt], [u].[CreatedBy], [u].[Email], [u].[EmailVerificationCodeExpires], [u].[EmailVerificationCodeHash], [u].[IsDeleted], [u].[IsEmailConfirmed], [u].[LastVerificationSentAt], [u].[Password], [u].[UpdatedAt], [u].[Username], [s].[Id], [s].[CreatedAt], [s].[CreatedBy], [s].[IsDeleted], [s].[Status], [s].[Title], [s].[ToDoId], [s].[UpdatedAt]
FROM [ToDos] AS [t]
INNER JOIN [Users] AS [u] ON [t].[UserId] = [u].[Id]
LEFT JOIN [SubTasks] AS [s] ON [t].[Id] = [s].[ToDoId]
WHERE [t].[UserId] = @__userId_Value_0 AND [t].[IsDeleted] = CAST(0 AS bit) AND [t].[IsDeleted] = CAST(0 AS bit) AND [t].[IsDeleted] = CAST(0 AS bit)
ORDER BY [t].[Id], [u].[Id] 
2025-09-17 20:49:42.1438 | DEBUG | Closing data reader to 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:42.1438 | DEBUG | A data reader for 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' is being disposed after spending 2ms reading results. 
2025-09-17 20:49:42.1438 | DEBUG | Closing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:42.1438 | DEBUG | Closed connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' (0ms). 
2025-09-17 20:49:42.1438 | DEBUG | List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter 
2025-09-17 20:49:42.1438 | DEBUG | No information found on request to perform content negotiation. 
2025-09-17 20:49:42.1438 | DEBUG | Attempting to select an output formatter without using a content type as no explicit content types were specified for the response. 
2025-09-17 20:49:42.1438 | DEBUG | Attempting to select the first formatter in the output formatters list which can write the result. 
2025-09-17 20:49:42.1438 | DEBUG | Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response. 
2025-09-17 20:49:42.1857 | DEBUG | Connection id "0HNFM28I0KQPK" completed keep alive response. 
2025-09-17 20:49:42.1857 | DEBUG | 'AppDbContext' disposed. 
2025-09-17 20:49:42.1857 | DEBUG | Disposing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:49:42.1857 | DEBUG | Disposed connection to database '' on server '' (0ms). 
2025-09-17 20:49:42.1857 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000009": started reading request body. 
2025-09-17 20:49:42.1857 | DEBUG | Connection id "0HNFM28I0KQPK", Request id "0HNFM28I0KQPK:00000009": done reading request body. 
2025-09-17 20:50:52.1244 | DEBUG | Connection id "0HNFM28I0KQPL" accepted. 
2025-09-17 20:50:52.1244 | DEBUG | Connection id "0HNFM28I0KQPL" started. 
2025-09-17 20:50:52.1244 | DEBUG | Connection 0HNFM28I0KQPL established using the following protocol: Tls13 
2025-09-17 20:50:52.1244 | DEBUG | No candidates found for the request path '/swagger/v1/swagger.json' 
2025-09-17 20:50:52.1244 | DEBUG | Request did not match any endpoints 
2025-09-17 20:50:52.2639 | DEBUG | Response markup is scheduled to include Browser Link script injection. 
2025-09-17 20:50:52.2639 | DEBUG | Response markup is scheduled to include browser refresh script injection. 
2025-09-17 20:50:52.2645 | DEBUG | Response markup was updated to include Browser Link script injection. 
2025-09-17 20:50:52.2645 | DEBUG | Response markup was updated to include browser refresh script injection. 
2025-09-17 20:50:52.4025 | DEBUG | Script injected: /_framework/aspnetcore-browser-refresh.js 
2025-09-17 20:50:52.5337 | DEBUG | No candidates found for the request path '/favicon.ico' 
2025-09-17 20:50:52.5337 | DEBUG | Request did not match any endpoints 
2025-09-17 20:50:52.5337 | DEBUG | AuthenticationScheme: Bearer was not authenticated. 
2025-09-17 20:51:53.3509 | DEBUG | Connection id "0HNFM28I0KQPK" disconnecting. 
2025-09-17 20:51:53.3509 | DEBUG | Connection id "0HNFM28I0KQPK" stopped. 
2025-09-17 20:51:53.3509 | DEBUG | Connection id "0HNFM28I0KQPK" sending FIN because: "The Socket transport's send loop completed gracefully." 
2025-09-17 20:52:05.9294 | DEBUG | Registered model binder providers, in the following order: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider 
2025-09-17 20:52:06.0089 | DEBUG | Hosting starting 
2025-09-17 20:52:06.0207 | DEBUG | Reading data from file 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys\key-cb61fb62-f4ef-41cd-9d69-58589f90bbdb.xml'. 
2025-09-17 20:52:06.0413 | DEBUG | Found key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb}. 
2025-09-17 20:52:06.0509 | DEBUG | Considering key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} with expiration date 2025-12-16 08:29:21Z as default key. 
2025-09-17 20:52:06.0509 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 20:52:06.0509 | DEBUG | Decrypting secret element using Windows DPAPI. 
2025-09-17 20:52:06.0509 | DEBUG | Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60 
2025-09-17 20:52:06.0509 | DEBUG | Opening CNG algorithm 'AES' from provider '(null)' with chaining mode CBC. 
2025-09-17 20:52:06.0509 | DEBUG | Opening CNG algorithm 'SHA256' from provider '(null)' with HMAC. 
2025-09-17 20:52:06.0509 | DEBUG | Using key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} as the default key. 
2025-09-17 20:52:06.0509 | DEBUG | Key ring with default key {cb61fb62-f4ef-41cd-9d69-58589f90bbdb} was loaded during application startup. 
2025-09-17 20:52:06.0625 | DEBUG | Middleware loaded 
2025-09-17 20:52:06.0625 | DEBUG | Middleware loaded. Script /_framework/aspnetcore-browser-refresh.js (16501 B). 
2025-09-17 20:52:06.0625 | DEBUG | Middleware loaded. Script /_framework/blazor-hotreload.js (799 B). 
2025-09-17 20:52:06.1032 | DEBUG | Middleware configuration started with options: {AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True} 
2025-09-17 20:52:06.1032 | DEBUG | Wildcard detected, all requests with hosts will be allowed. 
2025-09-17 20:52:06.1032 | DEBUG | Middleware loaded: DOTNET_MODIFIABLE_ASSEMBLIES=debug, __ASPNETCORE_BROWSER_TOOLS=true 
2025-09-17 20:52:06.1551 | DEBUG | Loaded hosting startup assembly ToDo.API 
2025-09-17 20:52:06.1551 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.ApiEndpointDiscovery 
2025-09-17 20:52:06.1551 | DEBUG | Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh 
2025-09-17 20:52:06.1551 | DEBUG | Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net 
2025-09-17 20:52:06.1604 | DEBUG | Executing API description provider 'EndpointMetadataApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 20:52:06.1604 | DEBUG | Executing API description provider 'DefaultApiDescriptionProvider' from assembly Microsoft.AspNetCore.Mvc.ApiExplorer v9.0.0.0. 
2025-09-17 20:52:06.1963 | DEBUG | Hosting started 
2025-09-17 20:52:14.3173 | DEBUG | Connection id "0HNFM2BNMOD68" accepted. 
2025-09-17 20:52:14.3173 | DEBUG | Connection id "0HNFM2BNMOD68" started. 
2025-09-17 20:52:14.4047 | DEBUG | Connection 0HNFM2BNMOD68 established using the following protocol: Tls13 
2025-09-17 20:52:14.6734 | DEBUG | No candidates found for the request path '/swagger/v1/swagger.json' 
2025-09-17 20:52:14.6734 | DEBUG | Request did not match any endpoints 
2025-09-17 20:52:20.4362 | DEBUG | Script injected: /_framework/aspnetcore-browser-refresh.js 
2025-09-17 20:52:20.5203 | DEBUG | No candidates found for the request path '/swagger/v1/swagger.json' 
2025-09-17 20:52:20.5203 | DEBUG | Request did not match any endpoints 
2025-09-17 20:54:33.1231 | DEBUG | Connection id "0HNFM2BNMOD68" is closing. 
2025-09-17 20:54:33.1308 | DEBUG | Connection id "0HNFM2BNMOD68" is closed. The last processed stream ID was 7. 
2025-09-17 20:54:33.1308 | DEBUG | Connection id "0HNFM2BNMOD68" received FIN. 
2025-09-17 20:54:33.1308 | DEBUG | Connection id "0HNFM2BNMOD68" sending FIN because: "The Socket transport's send loop completed gracefully." 
2025-09-17 20:54:33.1308 | DEBUG | The connection queue processing loop for 0HNFM2BNMOD68 completed. 
2025-09-17 20:54:33.1308 | DEBUG | Connection id "0HNFM2BNMOD68" stopped. 
2025-09-17 20:54:46.0003 | DEBUG | Connection id "0HNFM2BNMOD69" accepted. 
2025-09-17 20:54:46.0003 | DEBUG | Connection id "0HNFM2BNMOD69" received FIN. 
2025-09-17 20:54:46.0003 | DEBUG | Connection id "0HNFM2BNMOD69" started. 
2025-09-17 20:54:46.0003 | DEBUG | Connection id "0HNFM2BNMOD6A" accepted. 
2025-09-17 20:54:46.0003 | DEBUG | Connection id "0HNFM2BNMOD6A" started. 
2025-09-17 20:54:46.0166 | DEBUG | Failed to authenticate HTTPS connection. System.IO.IOException: Received an unexpected EOF or 0 bytes from the transport stream.
   at System.Net.Security.SslStream.ReceiveHandshakeFrameAsync[TIOAdapter](CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.OnConnectionAsync(ConnectionContext context)
2025-09-17 20:54:46.0166 | DEBUG | Connection id "0HNFM2BNMOD69" stopped. 
2025-09-17 20:54:46.0166 | DEBUG | Connection id "0HNFM2BNMOD69" sending FIN because: "The Socket transport's send loop completed gracefully." 
2025-09-17 20:54:46.0166 | DEBUG | Connection 0HNFM2BNMOD6A established using the following protocol: Tls13 
2025-09-17 20:54:46.0310 | DEBUG | 1 candidate(s) found for the request path '/api/ToDos' 
2025-09-17 20:54:46.0310 | DEBUG | Endpoint 'ToDo.API.Controllers.ToDosController.CreateToDo (ToDo.API)' with route pattern 'api/ToDos' is valid for the request path '/api/ToDos' 
2025-09-17 20:54:46.0310 | DEBUG | Request matched endpoint 'ToDo.API.Controllers.ToDosController.CreateToDo (ToDo.API)' 
2025-09-17 20:54:46.1026 | DEBUG | Successfully validated the token. 
2025-09-17 20:54:46.1026 | DEBUG | AuthenticationScheme: Bearer was successfully authenticated. 
2025-09-17 20:54:46.1189 | DEBUG | Execution plan of authorization filters (in the following order): None 
2025-09-17 20:54:46.1189 | DEBUG | Execution plan of resource filters (in the following order): None 
2025-09-17 20:54:46.1189 | DEBUG | Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000) 
2025-09-17 20:54:46.1189 | DEBUG | Execution plan of exception filters (in the following order): None 
2025-09-17 20:54:46.1189 | DEBUG | Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000) 
2025-09-17 20:54:46.1189 | DEBUG | Executing controller factory for controller ToDo.API.Controllers.ToDosController (ToDo.API) 
2025-09-17 20:54:46.1922 | DEBUG | An 'IServiceProvider' was created for internal use by Entity Framework. 
2025-09-17 20:54:46.5249 | DEBUG | The index {'UserId'} was not created on entity type 'UserRole' as the properties are already covered by the index {'UserId', 'RoleId'}. 
2025-09-17 20:54:46.7222 | DEBUG | Entity Framework Core 9.0.8 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.8' with options: MigrationsAssembly=ToDo.Data EngineType=SqlServer  
2025-09-17 20:54:46.7512 | DEBUG | Executed controller factory for controller ToDo.API.Controllers.ToDosController (ToDo.API) 
2025-09-17 20:54:46.7512 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.ToDosDtos.CreateToDosRequestDto' ... 
2025-09-17 20:54:46.7512 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.ToDosDtos.CreateToDosRequestDto' using the name '' in request data ... 
2025-09-17 20:54:46.7512 | DEBUG | Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'. 
2025-09-17 20:54:46.7512 | DEBUG | Connection id "0HNFM2BNMOD6A", Request id "0HNFM2BNMOD6A:00000001": started reading request body. 
2025-09-17 20:54:46.7512 | DEBUG | Connection id "0HNFM2BNMOD6A", Request id "0HNFM2BNMOD6A:00000001": done reading request body. 
2025-09-17 20:54:46.7712 | DEBUG | JSON input formatter succeeded, deserializing to type 'ToDo.API.Dtos.ToDosDtos.CreateToDosRequestDto' 
2025-09-17 20:54:46.7712 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.ToDosDtos.CreateToDosRequestDto'. 
2025-09-17 20:54:46.7712 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.ToDosDtos.CreateToDosRequestDto'. 
2025-09-17 20:54:46.7712 | DEBUG | Attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.ToDosDtos.CreateToDosRequestDto' ... 
2025-09-17 20:54:46.7712 | DEBUG | Done attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.ToDosDtos.CreateToDosRequestDto'. 
2025-09-17 20:54:46.8434 | DEBUG | Compiling query expression: 
'DbSet<User>()
    .Any(u => u.Id == __userId_0 && !(u.IsDeleted))' 
2025-09-17 20:54:47.0408 | DEBUG | Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleAsync<bool>(
    asyncEnumerable: SingleQueryingEnumerable.Create<bool>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Projection Mapping:
                EmptyProjectionMember -> 0
            SELECT EXISTS (
                SELECT 1
                FROM Users AS u
                WHERE (u.Id == @__userId_0) && Not(u.IsDeleted))) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Projection Mapping:
                EmptyProjectionMember -> 0
            SELECT EXISTS (
                SELECT 1
                FROM Users AS u
                WHERE (u.Id == @__userId_0) && Not(u.IsDeleted)), 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: [LIFTABLE Constant: ReaderColumn[] { ReaderColumn<bool> } | Resolver: namelessParameter{0} => new ReaderColumn[]{ new ReaderColumn<bool>(
            True, 
            null, 
            default(IPropertyBase), 
            (dataReader, indexMap) => dataReader.GetBoolean(0)
        ) }], 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            bool? value1;
            value1 = dataReader.IsDBNull(0) ? default(bool?) : (bool?)dataReader.GetBoolean(0);
            return (bool)value1;
        }, 
        contextType: ToDo.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)' 
2025-09-17 20:54:47.0820 | DEBUG | Creating DbConnection. 
2025-09-17 20:54:47.0956 | DEBUG | Created DbConnection. (10ms). 
2025-09-17 20:54:47.0956 | DEBUG | Opening connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:54:47.2272 | DEBUG | Opened connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:54:47.2272 | DEBUG | Creating DbCommand for 'ExecuteReader'. 
2025-09-17 20:54:47.2272 | DEBUG | Created DbCommand for 'ExecuteReader' (2ms). 
2025-09-17 20:54:47.2370 | DEBUG | Initialized DbCommand for 'ExecuteReader' (7ms). 
2025-09-17 20:54:47.2370 | DEBUG | Executing DbCommand [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0 AND [u].[IsDeleted] = CAST(0 AS bit)) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END 
2025-09-17 20:54:47.3199 | DEBUG | Closing data reader to 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:54:47.3199 | DEBUG | A data reader for 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' is being disposed after spending 4ms reading results. 
2025-09-17 20:54:47.3199 | DEBUG | Closing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:54:47.3297 | DEBUG | Closed connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' (3ms). 
2025-09-17 20:54:47.3540 | DEBUG | 'AppDbContext' generated a temporary value for the property 'ToDos.Id'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 20:54:47.3976 | DEBUG | Context 'AppDbContext' started tracking 'ToDos' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 20:54:47.3976 | DEBUG | SaveChanges starting for 'AppDbContext'. 
2025-09-17 20:54:47.4636 | DEBUG | Opening connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:54:47.4636 | DEBUG | Opened connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:54:47.4636 | DEBUG | Creating DbCommand for 'ExecuteReader'. 
2025-09-17 20:54:47.4636 | DEBUG | Created DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:54:47.4636 | DEBUG | Initialized DbCommand for 'ExecuteReader' (1ms). 
2025-09-17 20:54:47.4682 | DEBUG | Executing DbCommand [Parameters=[@p0='?' (DbType = DateTime2), @p1='?' (Size = 4000), @p2='?' (Size = 500), @p3='?' (DbType = Boolean), @p4='?' (DbType = Int32), @p5='?' (Size = 200), @p6='?' (DbType = Date), @p7='?' (DbType = DateTime2), @p8='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [ToDos] ([CreatedAt], [CreatedBy], [Description], [IsDeleted], [Status], [Title], [ToDoAt], [UpdatedAt], [UserId])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8); 
2025-09-17 20:54:47.5001 | DEBUG | The foreign key property 'ToDos.Id' was detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see property values. 
2025-09-17 20:54:47.5170 | DEBUG | Closing data reader to 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:54:47.5170 | DEBUG | A data reader for 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' is being disposed after spending 16ms reading results. 
2025-09-17 20:54:47.5170 | DEBUG | Closing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:54:47.5170 | DEBUG | Closed connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' (0ms). 
2025-09-17 20:54:47.5170 | DEBUG | An entity of type 'ToDos' tracked by 'AppDbContext' changed state from 'Added' to 'Unchanged'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 20:54:47.5321 | DEBUG | SaveChanges completed for 'AppDbContext' with 1 entities written to the database. 
2025-09-17 20:54:47.5321 | DEBUG | Compiling query expression: 
'DbSet<ToDos>()
    .Where(e => (long)e.Id == __id_0 && !(e.IsDeleted))
    .Include("User")
    .Include("SubTasks")
    .FirstOrDefault()' 
2025-09-17 20:54:47.5519 | DEBUG | Including navigation: 'ToDos.User'. 
2025-09-17 20:54:47.5519 | DEBUG | Including navigation: 'ToDos.SubTasks'. 
2025-09-17 20:54:47.6628 | DEBUG | Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<ToDos>(
    asyncEnumerable: SingleQueryingEnumerable.Create<ToDos>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: ToDos.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: ToDos.CreatedAt (DateTime) Required, 1], [Property: ToDos.CreatedBy (string) Required, 2], [Property: ToDos.Description (string) Required MaxLength(500), 3], [Property: ToDos.IsDeleted (bool) Required, 4], [Property: ToDos.Status (TaskStatuss) Required, 5], [Property: ToDos.Title (string) Required MaxLength(200), 6], [Property: ToDos.ToDoAt (DateOnly?) Required, 7], [Property: ToDos.UpdatedAt (DateTime?), 8], [Property: ToDos.UserId (int) Required FK Index, 9] }
                1 -> Dictionary<IProperty, int> { [Property: User.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 10], [Property: User.CreatedAt (DateTime) Required, 11], [Property: User.CreatedBy (string) Required, 12], [Property: User.Email (string) Required, 13], [Property: User.EmailVerificationCodeExpires (DateTime?), 14], [Property: User.EmailVerificationCodeHash (string), 15], [Property: User.IsDeleted (bool) Required, 16], [Property: User.IsEmailConfirmed (bool) Required, 17], [Property: User.LastVerificationSentAt (DateTime?), 18], [Property: User.Password (string) Required, 19], [Property: User.UpdatedAt (DateTime?), 20], [Property: User.Username (string) Required MaxLength(50), 21] }
                2 -> 0
                3 -> 10
                4 -> Dictionary<IProperty, int> { [Property: SubTask.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 22], [Property: SubTask.CreatedAt (DateTime) Required, 23], [Property: SubTask.CreatedBy (string) Required, 24], [Property: SubTask.IsDeleted (bool) Required, 25], [Property: SubTask.Status (TaskStatuss) Required MaxLength(20), 26], [Property: SubTask.Title (string) Required MaxLength(255), 27], [Property: SubTask.ToDoId (int) Required FK Index, 28], [Property: SubTask.UpdatedAt (DateTime?), 29] }
                5 -> 22
            SELECT s0.Id, s0.CreatedAt, s0.CreatedBy, s0.Description, s0.IsDeleted, s0.Status, s0.Title, s0.ToDoAt, s0.UpdatedAt, s0.UserId, s0.Id0, s0.CreatedAt0, s0.CreatedBy0, s0.Email, s0.EmailVerificationCodeExpires, s0.EmailVerificationCodeHash, s0.IsDeleted0, s0.IsEmailConfirmed, s0.LastVerificationSentAt, s0.Password, s0.UpdatedAt0, s0.Username, s.Id, s.CreatedAt, s.CreatedBy, s.IsDeleted, s.Status, s.Title, s.ToDoId, s.UpdatedAt
            FROM 
            (
                SELECT TOP(1) t.Id, t.CreatedAt, t.CreatedBy, t.Description, t.IsDeleted, t.Status, t.Title, t.ToDoAt, t.UpdatedAt, t.UserId, u.Id AS Id0, u.CreatedAt AS CreatedAt0, u.CreatedBy AS CreatedBy0, u.Email, u.EmailVerificationCodeExpires, u.EmailVerificationCodeHash, u.IsDeleted AS IsDeleted0, u.IsEmailConfirmed, u.LastVerificationSentAt, u.Password, u.UpdatedAt AS UpdatedAt0, u.Username
                FROM ToDos AS t
                INNER JOIN Users AS u ON t.UserId == u.Id
                WHERE (CAST(t.Id AS bigint) == @__id_0) && Not(t.IsDeleted)
            ) AS s0
            LEFT JOIN SubTasks AS s ON s0.Id == s.ToDoId
            ORDER BY s0.Id ASC, s0.Id0 ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: ToDos.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: ToDos.CreatedAt (DateTime) Required, 1], [Property: ToDos.CreatedBy (string) Required, 2], [Property: ToDos.Description (string) Required MaxLength(500), 3], [Property: ToDos.IsDeleted (bool) Required, 4], [Property: ToDos.Status (TaskStatuss) Required, 5], [Property: ToDos.Title (string) Required MaxLength(200), 6], [Property: ToDos.ToDoAt (DateOnly?) Required, 7], [Property: ToDos.UpdatedAt (DateTime?), 8], [Property: ToDos.UserId (int) Required FK Index, 9] }
                1 -> Dictionary<IProperty, int> { [Property: User.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 10], [Property: User.CreatedAt (DateTime) Required, 11], [Property: User.CreatedBy (string) Required, 12], [Property: User.Email (string) Required, 13], [Property: User.EmailVerificationCodeExpires (DateTime?), 14], [Property: User.EmailVerificationCodeHash (string), 15], [Property: User.IsDeleted (bool) Required, 16], [Property: User.IsEmailConfirmed (bool) Required, 17], [Property: User.LastVerificationSentAt (DateTime?), 18], [Property: User.Password (string) Required, 19], [Property: User.UpdatedAt (DateTime?), 20], [Property: User.Username (string) Required MaxLength(50), 21] }
                2 -> 0
                3 -> 10
                4 -> Dictionary<IProperty, int> { [Property: SubTask.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 22], [Property: SubTask.CreatedAt (DateTime) Required, 23], [Property: SubTask.CreatedBy (string) Required, 24], [Property: SubTask.IsDeleted (bool) Required, 25], [Property: SubTask.Status (TaskStatuss) Required MaxLength(20), 26], [Property: SubTask.Title (string) Required MaxLength(255), 27], [Property: SubTask.ToDoId (int) Required FK Index, 28], [Property: SubTask.UpdatedAt (DateTime?), 29] }
                5 -> 22
            SELECT s0.Id, s0.CreatedAt, s0.CreatedBy, s0.Description, s0.IsDeleted, s0.Status, s0.Title, s0.ToDoAt, s0.UpdatedAt, s0.UserId, s0.Id0, s0.CreatedAt0, s0.CreatedBy0, s0.Email, s0.EmailVerificationCodeExpires, s0.EmailVerificationCodeHash, s0.IsDeleted0, s0.IsEmailConfirmed, s0.LastVerificationSentAt, s0.Password, s0.UpdatedAt0, s0.Username, s.Id, s.CreatedAt, s.CreatedBy, s.IsDeleted, s.Status, s.Title, s.ToDoId, s.UpdatedAt
            FROM 
            (
                SELECT TOP(1) t.Id, t.CreatedAt, t.CreatedBy, t.Description, t.IsDeleted, t.Status, t.Title, t.ToDoAt, t.UpdatedAt, t.UserId, u.Id AS Id0, u.CreatedAt AS CreatedAt0, u.CreatedBy AS CreatedBy0, u.Email, u.EmailVerificationCodeExpires, u.EmailVerificationCodeHash, u.IsDeleted AS IsDeleted0, u.IsEmailConfirmed, u.LastVerificationSentAt, u.Password, u.UpdatedAt AS UpdatedAt0, u.Username
                FROM ToDos AS t
                INNER JOIN Users AS u ON t.UserId == u.Id
                WHERE (CAST(t.Id AS bigint) == @__id_0) && Not(t.IsDeleted)
            ) AS s0
            LEFT JOIN SubTasks AS s ON s0.Id == s.ToDoId
            ORDER BY s0.Id ASC, s0.Id0 ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: [LIFTABLE Constant: ReaderColumn[] { ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<int>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<int>, ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<bool>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<int>, ReaderColumn<DateTime> } | Resolver: namelessParameter{0} => new ReaderColumn[]
        { 
            new ReaderColumn<int>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(0)
            ), 
            new ReaderColumn<DateTime>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(1)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(2)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Description"), 
                (dataReader, indexMap) => (object)dataReader.GetString(3)
            ), 
            new ReaderColumn<bool>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(4)
            ), 
            new ReaderColumn<int>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Status"), 
                (dataReader, indexMap) => dataReader.GetInt32(5)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Title"), 
                (dataReader, indexMap) => (object)dataReader.GetString(6)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("ToDoAt"), 
                (dataReader, indexMap) => (object)dataReader.GetFieldValue<DateOnly>(7)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(8)
            ), 
            new ReaderColumn<int>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("UserId"), 
                (dataReader, indexMap) => dataReader.GetInt32(9)
            ), 
            new ReaderColumn<int>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(10)
            ), 
            new ReaderColumn<DateTime>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(11)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(12)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Email"), 
                (dataReader, indexMap) => (object)dataReader.GetString(13)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("EmailVerificationCodeExpires"), 
                (dataReader, indexMap) => dataReader.GetDateTime(14)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("EmailVerificationCodeHash"), 
                (dataReader, indexMap) => (object)dataReader.GetString(15)
            ), 
            new ReaderColumn<bool>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(16)
            ), 
            new ReaderColumn<bool>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("IsEmailConfirmed"), 
                (dataReader, indexMap) => dataReader.GetBoolean(17)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("LastVerificationSentAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(18)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Password"), 
                (dataReader, indexMap) => (object)dataReader.GetString(19)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(20)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Username"), 
                (dataReader, indexMap) => (object)dataReader.GetString(21)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(22)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(23)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(24)
            ), 
            new ReaderColumn<bool>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(25)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("Status"), 
                (dataReader, indexMap) => (object)dataReader.GetString(26)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("Title"), 
                (dataReader, indexMap) => (object)dataReader.GetString(27)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("ToDoId"), 
                (dataReader, indexMap) => dataReader.GetInt32(28)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(29)
            ) 
        }], 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                ToDos entity;
                User entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    ToDos instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(ToDos);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: ToDos.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (ToDos)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: ToDos | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: ToDos | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos")]: 
                                {
                                    return 
                                    {
                                        ToDos instance;
                                        instance = new ToDos();
                                        instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                        instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(1);
                                        instance.<CreatedBy>k__BackingField = (string)dataReader.GetFieldValue<object>(2);
                                        instance.<Description>k__BackingField = (string)dataReader.GetFieldValue<object>(3);
                                        instance.<IsDeleted>k__BackingField = dataReader.GetBoolean(4);
                                        instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<TaskStatuss, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: ToDos.Status (TaskStatuss) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(5));
                                        instance.<Title>k__BackingField = (string)dataReader.GetFieldValue<object>(6);
                                        instance.<ToDoAt>k__BackingField = (DateOnly?)(DateOnly)dataReader.GetFieldValue<object>(7);
                                        instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(8);
                                        instance.<UserId>k__BackingField = dataReader.GetInt32(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: ToDos | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(ToDos)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    User instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(User);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: User.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetInt32(10) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (User)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")]: 
                                {
                                    return 
                                    {
                                        User instance;
                                        instance = new User();
                                        instance.<Id>k__BackingField = dataReader.GetInt32(10);
                                        instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(11);
                                        instance.<CreatedBy>k__BackingField = (string)dataReader.GetFieldValue<object>(12);
                                        instance.<Email>k__BackingField = (string)dataReader.GetFieldValue<object>(13);
                                        instance.<EmailVerificationCodeExpires>k__BackingField = dataReader.IsDBNull(14) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(14);
                                        instance.<EmailVerificationCodeHash>k__BackingField = dataReader.IsDBNull(15) ? default(string) : (string)dataReader.GetFieldValue<object>(15);
                                        instance.<IsDeleted>k__BackingField = dataReader.GetBoolean(16);
                                        instance.<IsEmailConfirmed>k__BackingField = dataReader.GetBoolean(17);
                                        instance.<LastVerificationSentAt>k__BackingField = dataReader.IsDBNull(18) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(18);
                                        instance.<Password>k__BackingField = (string)dataReader.GetFieldValue<object>(19);
                                        instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(20);
                                        instance.<Username>k__BackingField = (string)dataReader.GetFieldValue<object>(21);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(User)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                resultContext.Values = new object[]
                { 
                    entity, 
                    entity 
                };
                ShaperProcessingExpressionVisitor.IncludeReference<ToDos, ToDos, User>(
                    queryContext: queryContext, 
                    entity: (ToDos)(resultContext.Values[0]), 
                    relatedEntity: (User)(resultContext.Values[1]), 
                    navigation: [LIFTABLE Constant: Navigation: ToDos.User (User) ToPrincipal User | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindNavigation("User")], 
                    inverseNavigation: default(INavigation), 
                    fixup: (namelessParameter{9}, namelessParameter{10}) => 
                    {
                        return namelessParameter{9}.<User>k__BackingField = namelessParameter{10};
                    }, 
                    trackingQuery: True);
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<ToDos, ToDos>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (ToDos)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                    { 
                        (object)(int?)dataReader.GetInt32(0), 
                        (object)(int?)dataReader.GetInt32(10) 
                    }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                    { 
                        (object)(int?)dataReader.GetInt32(0), 
                        (object)(int?)dataReader.GetInt32(10) 
                    }], 
                    navigation: [LIFTABLE Constant: Navigation: ToDos.SubTasks (ICollection<SubTask>) Collection ToDependent SubTask Inverse: ToDo | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindNavigation("SubTasks")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<ToDos, ICollection<SubTask>, SubTask> | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindNavigation("SubTasks").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<ToDos, SubTask>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    (object)(int?)dataReader.GetInt32(0), 
                    (object)(int?)dataReader.GetInt32(10) 
                }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    (object)(int?)dataReader.GetInt32(0), 
                    (object)(int?)dataReader.GetInt32(10) 
                }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(22) ? default(int?) : (int?)dataReader.GetInt32(22) }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    SubTask entity;
                    entity = 
                    {
                        MaterializationContext materializationContext3;
                        IEntityType entityType3;
                        SubTask instance3;
                        InternalEntityEntry entry3;
                        bool hasNullKey3;
                        materializationContext3 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance3 = default(SubTask);
                        entry3 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: SubTask.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindPrimaryKey()], 
                            keyValues: new object[]{ dataReader.IsDBNull(22) ? default(object) : (object)dataReader.GetInt32(22) }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey3);
                        !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
                        {
                            entityType3 = entry3.EntityType;
                            return instance3 = (SubTask)entry3.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot3;
                            shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType3 = [LIFTABLE Constant: EntityType: SubTask | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask")];
                            instance3 = switch (entityType3)
                            {
                                case [LIFTABLE Constant: EntityType: SubTask | Resolver: namelessParameter{14} => namelessParameter{14}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask")]: 
                                    {
                                        return 
                                        {
                                            SubTask instance;
                                            instance = new SubTask();
                                            instance.<Id>k__BackingField = dataReader.IsDBNull(22) ? default(int) : dataReader.GetInt32(22);
                                            instance.<CreatedAt>k__BackingField = dataReader.IsDBNull(23) ? default(DateTime) : dataReader.GetDateTime(23);
                                            instance.<CreatedBy>k__BackingField = dataReader.IsDBNull(24) ? default(string) : (string)dataReader.GetFieldValue<object>(24);
                                            instance.<IsDeleted>k__BackingField = dataReader.IsDBNull(25) ? default(bool) : dataReader.GetBoolean(25);
                                            instance.<Status>k__BackingField = dataReader.IsDBNull(26) ? default(TaskStatuss) : Invoke(((EnumToStringConverter<TaskStatuss>)((IReadOnlyProperty)[LIFTABLE Constant: Property: SubTask.Status (TaskStatuss) Required MaxLength(20) | Resolver: namelessParameter{15} => namelessParameter{15}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, (string)dataReader.GetFieldValue<object>(26));
                                            instance.<Title>k__BackingField = dataReader.IsDBNull(27) ? default(string) : (string)dataReader.GetFieldValue<object>(27);
                                            instance.<ToDoId>k__BackingField = dataReader.IsDBNull(28) ? default(int) : dataReader.GetInt32(28);
                                            instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(29) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(29);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext3.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: SubTask | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(SubTask)
                            }
                            ;
                            entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType3, 
                                entity: instance3, 
                                snapshot: shadowSnapshot3);
                            return instance3;
                        } : default(void);
                        return instance3;
                    };
                    return entity;
                }, 
                inverseNavigation: [LIFTABLE Constant: Navigation: SubTask.ToDo (ToDos) ToPrincipal ToDos Inverse: SubTasks | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindNavigation("ToDo")], 
                fixup: (namelessParameter{18}, namelessParameter{19}) => 
                {
                    [LIFTABLE Constant: ClrICollectionAccessor<ToDos, ICollection<SubTask>, SubTask> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindNavigation("SubTasks").GetCollectionAccessor()].Add(
                        entity: namelessParameter{18}, 
                        value: namelessParameter{19}, 
                        forMaterialization: True);
                    return namelessParameter{19}.<ToDo>k__BackingField = namelessParameter{18};
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (ToDos)(resultContext.Values[0]) : default(ToDos);
        }, 
        contextType: ToDo.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)' 
2025-09-17 20:54:47.6714 | DEBUG | Opening connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:54:47.6714 | DEBUG | Opened connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:54:47.6714 | DEBUG | Creating DbCommand for 'ExecuteReader'. 
2025-09-17 20:54:47.6714 | DEBUG | Created DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:54:47.6714 | DEBUG | Initialized DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:54:47.6714 | DEBUG | Executing DbCommand [Parameters=[@__id_0='?' (DbType = Int64)], CommandType='Text', CommandTimeout='30']
SELECT [s0].[Id], [s0].[CreatedAt], [s0].[CreatedBy], [s0].[Description], [s0].[IsDeleted], [s0].[Status], [s0].[Title], [s0].[ToDoAt], [s0].[UpdatedAt], [s0].[UserId], [s0].[Id0], [s0].[CreatedAt0], [s0].[CreatedBy0], [s0].[Email], [s0].[EmailVerificationCodeExpires], [s0].[EmailVerificationCodeHash], [s0].[IsDeleted0], [s0].[IsEmailConfirmed], [s0].[LastVerificationSentAt], [s0].[Password], [s0].[UpdatedAt0], [s0].[Username], [s].[Id], [s].[CreatedAt], [s].[CreatedBy], [s].[IsDeleted], [s].[Status], [s].[Title], [s].[ToDoId], [s].[UpdatedAt]
FROM (
    SELECT TOP(1) [t].[Id], [t].[CreatedAt], [t].[CreatedBy], [t].[Description], [t].[IsDeleted], [t].[Status], [t].[Title], [t].[ToDoAt], [t].[UpdatedAt], [t].[UserId], [u].[Id] AS [Id0], [u].[CreatedAt] AS [CreatedAt0], [u].[CreatedBy] AS [CreatedBy0], [u].[Email], [u].[EmailVerificationCodeExpires], [u].[EmailVerificationCodeHash], [u].[IsDeleted] AS [IsDeleted0], [u].[IsEmailConfirmed], [u].[LastVerificationSentAt], [u].[Password], [u].[UpdatedAt] AS [UpdatedAt0], [u].[Username]
    FROM [ToDos] AS [t]
    INNER JOIN [Users] AS [u] ON [t].[UserId] = [u].[Id]
    WHERE CAST([t].[Id] AS bigint) = @__id_0 AND [t].[IsDeleted] = CAST(0 AS bit)
) AS [s0]
LEFT JOIN [SubTasks] AS [s] ON [s0].[Id] = [s].[ToDoId]
ORDER BY [s0].[Id], [s0].[Id0] 
2025-09-17 20:54:47.7298 | DEBUG | The navigation 'ToDos.User' was detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 20:54:47.7298 | DEBUG | Context 'AppDbContext' started tracking 'User' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 20:54:47.7523 | DEBUG | Closing data reader to 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:54:47.7523 | DEBUG | A data reader for 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' is being disposed after spending 35ms reading results. 
2025-09-17 20:54:47.7523 | DEBUG | Closing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:54:47.7523 | DEBUG | Closed connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' (0ms). 
2025-09-17 20:54:47.7652 | DEBUG | List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter 
2025-09-17 20:54:47.7652 | DEBUG | No information found on request to perform content negotiation. 
2025-09-17 20:54:47.7652 | DEBUG | Attempting to select an output formatter without using a content type as no explicit content types were specified for the response. 
2025-09-17 20:54:47.7652 | DEBUG | Attempting to select the first formatter in the output formatters list which can write the result. 
2025-09-17 20:54:47.7652 | DEBUG | Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response. 
2025-09-17 20:54:47.7652 | DEBUG | Found the endpoints ToDo.API.Controllers.ToDosController.GetToDo (ToDo.API) for address (id=[1],action=[GetToDo],controller=[ToDos]) 
2025-09-17 20:54:47.7805 | DEBUG | Successfully processed template api/ToDos/{id} for ToDo.API.Controllers.ToDosController.GetToDo (ToDo.API) resulting in /api/ToDos/1 and  
2025-09-17 20:54:47.7805 | DEBUG | Link generation succeeded for endpoints ToDo.API.Controllers.ToDosController.GetToDo (ToDo.API) with result /api/ToDos/1 
2025-09-17 20:54:47.7998 | DEBUG | Connection id "0HNFM2BNMOD6A" completed keep alive response. 
2025-09-17 20:54:47.7998 | DEBUG | 'AppDbContext' disposed. 
2025-09-17 20:54:47.7998 | DEBUG | Disposing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:54:47.7998 | DEBUG | Disposed connection to database '' on server '' (0ms). 
2025-09-17 20:55:01.5649 | DEBUG | 1 candidate(s) found for the request path '/api/ToDos' 
2025-09-17 20:55:01.5649 | DEBUG | Endpoint 'ToDo.API.Controllers.ToDosController.GetAllToDos (ToDo.API)' with route pattern 'api/ToDos' is valid for the request path '/api/ToDos' 
2025-09-17 20:55:01.5649 | DEBUG | Request matched endpoint 'ToDo.API.Controllers.ToDosController.GetAllToDos (ToDo.API)' 
2025-09-17 20:55:01.5649 | DEBUG | Successfully validated the token. 
2025-09-17 20:55:01.5772 | DEBUG | AuthenticationScheme: Bearer was successfully authenticated. 
2025-09-17 20:55:01.5772 | DEBUG | Execution plan of authorization filters (in the following order): None 
2025-09-17 20:55:01.5772 | DEBUG | Execution plan of resource filters (in the following order): None 
2025-09-17 20:55:01.5772 | DEBUG | Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000) 
2025-09-17 20:55:01.5772 | DEBUG | Execution plan of exception filters (in the following order): None 
2025-09-17 20:55:01.5772 | DEBUG | Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000) 
2025-09-17 20:55:01.5772 | DEBUG | Executing controller factory for controller ToDo.API.Controllers.ToDosController (ToDo.API) 
2025-09-17 20:55:01.5980 | DEBUG | Entity Framework Core 9.0.8 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.8' with options: MigrationsAssembly=ToDo.Data EngineType=SqlServer  
2025-09-17 20:55:01.5980 | DEBUG | Executed controller factory for controller ToDo.API.Controllers.ToDosController (ToDo.API) 
2025-09-17 20:55:01.5980 | DEBUG | Compiling query expression: 
'DbSet<ToDos>()
    .Where(t => t.UserId == __userId_Value_0)
    .Where(e => !(e.IsDeleted))
    .Include("User")
    .Where(x => x.IsDeleted == False)
    .Include("SubTasks")
    .Where(x => x.IsDeleted == False)' 
2025-09-17 20:55:01.5980 | DEBUG | Including navigation: 'ToDos.User'. 
2025-09-17 20:55:01.5980 | DEBUG | Including navigation: 'ToDos.SubTasks'. 
2025-09-17 20:55:01.6493 | DEBUG | Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<ToDos>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: ToDos.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: ToDos.CreatedAt (DateTime) Required, 1], [Property: ToDos.CreatedBy (string) Required, 2], [Property: ToDos.Description (string) Required MaxLength(500), 3], [Property: ToDos.IsDeleted (bool) Required, 4], [Property: ToDos.Status (TaskStatuss) Required, 5], [Property: ToDos.Title (string) Required MaxLength(200), 6], [Property: ToDos.ToDoAt (DateOnly?) Required, 7], [Property: ToDos.UpdatedAt (DateTime?), 8], [Property: ToDos.UserId (int) Required FK Index, 9] }
            1 -> Dictionary<IProperty, int> { [Property: User.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 10], [Property: User.CreatedAt (DateTime) Required, 11], [Property: User.CreatedBy (string) Required, 12], [Property: User.Email (string) Required, 13], [Property: User.EmailVerificationCodeExpires (DateTime?), 14], [Property: User.EmailVerificationCodeHash (string), 15], [Property: User.IsDeleted (bool) Required, 16], [Property: User.IsEmailConfirmed (bool) Required, 17], [Property: User.LastVerificationSentAt (DateTime?), 18], [Property: User.Password (string) Required, 19], [Property: User.UpdatedAt (DateTime?), 20], [Property: User.Username (string) Required MaxLength(50), 21] }
            2 -> 0
            3 -> 10
            4 -> Dictionary<IProperty, int> { [Property: SubTask.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 22], [Property: SubTask.CreatedAt (DateTime) Required, 23], [Property: SubTask.CreatedBy (string) Required, 24], [Property: SubTask.IsDeleted (bool) Required, 25], [Property: SubTask.Status (TaskStatuss) Required MaxLength(20), 26], [Property: SubTask.Title (string) Required MaxLength(255), 27], [Property: SubTask.ToDoId (int) Required FK Index, 28], [Property: SubTask.UpdatedAt (DateTime?), 29] }
            5 -> 22
        SELECT t.Id, t.CreatedAt, t.CreatedBy, t.Description, t.IsDeleted, t.Status, t.Title, t.ToDoAt, t.UpdatedAt, t.UserId, u.Id, u.CreatedAt, u.CreatedBy, u.Email, u.EmailVerificationCodeExpires, u.EmailVerificationCodeHash, u.IsDeleted, u.IsEmailConfirmed, u.LastVerificationSentAt, u.Password, u.UpdatedAt, u.Username, s.Id, s.CreatedAt, s.CreatedBy, s.IsDeleted, s.Status, s.Title, s.ToDoId, s.UpdatedAt
        FROM ToDos AS t
        INNER JOIN Users AS u ON t.UserId == u.Id
        LEFT JOIN SubTasks AS s ON t.Id == s.ToDoId
        WHERE (((t.UserId == @__userId_Value_0) && Not(t.IsDeleted)) && (t.IsDeleted == CAST(0 AS bit))) && (t.IsDeleted == CAST(0 AS bit))
        ORDER BY t.Id ASC, u.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: ToDos.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: ToDos.CreatedAt (DateTime) Required, 1], [Property: ToDos.CreatedBy (string) Required, 2], [Property: ToDos.Description (string) Required MaxLength(500), 3], [Property: ToDos.IsDeleted (bool) Required, 4], [Property: ToDos.Status (TaskStatuss) Required, 5], [Property: ToDos.Title (string) Required MaxLength(200), 6], [Property: ToDos.ToDoAt (DateOnly?) Required, 7], [Property: ToDos.UpdatedAt (DateTime?), 8], [Property: ToDos.UserId (int) Required FK Index, 9] }
            1 -> Dictionary<IProperty, int> { [Property: User.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 10], [Property: User.CreatedAt (DateTime) Required, 11], [Property: User.CreatedBy (string) Required, 12], [Property: User.Email (string) Required, 13], [Property: User.EmailVerificationCodeExpires (DateTime?), 14], [Property: User.EmailVerificationCodeHash (string), 15], [Property: User.IsDeleted (bool) Required, 16], [Property: User.IsEmailConfirmed (bool) Required, 17], [Property: User.LastVerificationSentAt (DateTime?), 18], [Property: User.Password (string) Required, 19], [Property: User.UpdatedAt (DateTime?), 20], [Property: User.Username (string) Required MaxLength(50), 21] }
            2 -> 0
            3 -> 10
            4 -> Dictionary<IProperty, int> { [Property: SubTask.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 22], [Property: SubTask.CreatedAt (DateTime) Required, 23], [Property: SubTask.CreatedBy (string) Required, 24], [Property: SubTask.IsDeleted (bool) Required, 25], [Property: SubTask.Status (TaskStatuss) Required MaxLength(20), 26], [Property: SubTask.Title (string) Required MaxLength(255), 27], [Property: SubTask.ToDoId (int) Required FK Index, 28], [Property: SubTask.UpdatedAt (DateTime?), 29] }
            5 -> 22
        SELECT t.Id, t.CreatedAt, t.CreatedBy, t.Description, t.IsDeleted, t.Status, t.Title, t.ToDoAt, t.UpdatedAt, t.UserId, u.Id, u.CreatedAt, u.CreatedBy, u.Email, u.EmailVerificationCodeExpires, u.EmailVerificationCodeHash, u.IsDeleted, u.IsEmailConfirmed, u.LastVerificationSentAt, u.Password, u.UpdatedAt, u.Username, s.Id, s.CreatedAt, s.CreatedBy, s.IsDeleted, s.Status, s.Title, s.ToDoId, s.UpdatedAt
        FROM ToDos AS t
        INNER JOIN Users AS u ON t.UserId == u.Id
        LEFT JOIN SubTasks AS s ON t.Id == s.ToDoId
        WHERE (((t.UserId == @__userId_Value_0) && Not(t.IsDeleted)) && (t.IsDeleted == CAST(0 AS bit))) && (t.IsDeleted == CAST(0 AS bit))
        ORDER BY t.Id ASC, u.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: [LIFTABLE Constant: ReaderColumn[] { ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<int>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<int>, ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<bool>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<int>, ReaderColumn<DateTime> } | Resolver: namelessParameter{0} => new ReaderColumn[]
    { 
        new ReaderColumn<int>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Id"), 
            (dataReader, indexMap) => dataReader.GetInt32(0)
        ), 
        new ReaderColumn<DateTime>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("CreatedAt"), 
            (dataReader, indexMap) => dataReader.GetDateTime(1)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("CreatedBy"), 
            (dataReader, indexMap) => (object)dataReader.GetString(2)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Description"), 
            (dataReader, indexMap) => (object)dataReader.GetString(3)
        ), 
        new ReaderColumn<bool>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("IsDeleted"), 
            (dataReader, indexMap) => dataReader.GetBoolean(4)
        ), 
        new ReaderColumn<int>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Status"), 
            (dataReader, indexMap) => dataReader.GetInt32(5)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Title"), 
            (dataReader, indexMap) => (object)dataReader.GetString(6)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("ToDoAt"), 
            (dataReader, indexMap) => (object)dataReader.GetFieldValue<DateOnly>(7)
        ), 
        new ReaderColumn<DateTime>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("UpdatedAt"), 
            (dataReader, indexMap) => dataReader.GetDateTime(8)
        ), 
        new ReaderColumn<int>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("UserId"), 
            (dataReader, indexMap) => dataReader.GetInt32(9)
        ), 
        new ReaderColumn<int>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Id"), 
            (dataReader, indexMap) => dataReader.GetInt32(10)
        ), 
        new ReaderColumn<DateTime>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("CreatedAt"), 
            (dataReader, indexMap) => dataReader.GetDateTime(11)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("CreatedBy"), 
            (dataReader, indexMap) => (object)dataReader.GetString(12)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Email"), 
            (dataReader, indexMap) => (object)dataReader.GetString(13)
        ), 
        new ReaderColumn<DateTime>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("EmailVerificationCodeExpires"), 
            (dataReader, indexMap) => dataReader.GetDateTime(14)
        ), 
        new ReaderColumn<object>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("EmailVerificationCodeHash"), 
            (dataReader, indexMap) => (object)dataReader.GetString(15)
        ), 
        new ReaderColumn<bool>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("IsDeleted"), 
            (dataReader, indexMap) => dataReader.GetBoolean(16)
        ), 
        new ReaderColumn<bool>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("IsEmailConfirmed"), 
            (dataReader, indexMap) => dataReader.GetBoolean(17)
        ), 
        new ReaderColumn<DateTime>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("LastVerificationSentAt"), 
            (dataReader, indexMap) => dataReader.GetDateTime(18)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Password"), 
            (dataReader, indexMap) => (object)dataReader.GetString(19)
        ), 
        new ReaderColumn<DateTime>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("UpdatedAt"), 
            (dataReader, indexMap) => dataReader.GetDateTime(20)
        ), 
        new ReaderColumn<object>(
            False, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Username"), 
            (dataReader, indexMap) => (object)dataReader.GetString(21)
        ), 
        new ReaderColumn<int>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("Id"), 
            (dataReader, indexMap) => dataReader.GetInt32(22)
        ), 
        new ReaderColumn<DateTime>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("CreatedAt"), 
            (dataReader, indexMap) => dataReader.GetDateTime(23)
        ), 
        new ReaderColumn<object>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("CreatedBy"), 
            (dataReader, indexMap) => (object)dataReader.GetString(24)
        ), 
        new ReaderColumn<bool>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("IsDeleted"), 
            (dataReader, indexMap) => dataReader.GetBoolean(25)
        ), 
        new ReaderColumn<object>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("Status"), 
            (dataReader, indexMap) => (object)dataReader.GetString(26)
        ), 
        new ReaderColumn<object>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("Title"), 
            (dataReader, indexMap) => (object)dataReader.GetString(27)
        ), 
        new ReaderColumn<int>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("ToDoId"), 
            (dataReader, indexMap) => dataReader.GetInt32(28)
        ), 
        new ReaderColumn<DateTime>(
            True, 
            null, 
            namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("UpdatedAt"), 
            (dataReader, indexMap) => dataReader.GetDateTime(29)
        ) 
    }], 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            ToDos entity;
            User entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                ToDos instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(ToDos);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: ToDos.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (ToDos)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: ToDos | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: ToDos | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos")]: 
                            {
                                return 
                                {
                                    ToDos instance;
                                    instance = new ToDos();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(1);
                                    instance.<CreatedBy>k__BackingField = (string)dataReader.GetFieldValue<object>(2);
                                    instance.<Description>k__BackingField = (string)dataReader.GetFieldValue<object>(3);
                                    instance.<IsDeleted>k__BackingField = dataReader.GetBoolean(4);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<TaskStatuss, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: ToDos.Status (TaskStatuss) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(5));
                                    instance.<Title>k__BackingField = (string)dataReader.GetFieldValue<object>(6);
                                    instance.<ToDoAt>k__BackingField = (DateOnly?)(DateOnly)dataReader.GetFieldValue<object>(7);
                                    instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(8);
                                    instance.<UserId>k__BackingField = dataReader.GetInt32(9);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: ToDos | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(ToDos)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            entity = 
            {
                MaterializationContext materializationContext2;
                IEntityType entityType2;
                User instance2;
                InternalEntityEntry entry2;
                bool hasNullKey2;
                materializationContext2 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance2 = default(User);
                entry2 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: User.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(10) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey2);
                !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                {
                    entityType2 = entry2.EntityType;
                    return instance2 = (User)entry2.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot2;
                    shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType2 = [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")];
                    instance2 = switch (entityType2)
                    {
                        case [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")]: 
                            {
                                return 
                                {
                                    User instance;
                                    instance = new User();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(10);
                                    instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(11);
                                    instance.<CreatedBy>k__BackingField = (string)dataReader.GetFieldValue<object>(12);
                                    instance.<Email>k__BackingField = (string)dataReader.GetFieldValue<object>(13);
                                    instance.<EmailVerificationCodeExpires>k__BackingField = dataReader.IsDBNull(14) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(14);
                                    instance.<EmailVerificationCodeHash>k__BackingField = dataReader.IsDBNull(15) ? default(string) : (string)dataReader.GetFieldValue<object>(15);
                                    instance.<IsDeleted>k__BackingField = dataReader.GetBoolean(16);
                                    instance.<IsEmailConfirmed>k__BackingField = dataReader.GetBoolean(17);
                                    instance.<LastVerificationSentAt>k__BackingField = dataReader.IsDBNull(18) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(18);
                                    instance.<Password>k__BackingField = (string)dataReader.GetFieldValue<object>(19);
                                    instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(20);
                                    instance.<Username>k__BackingField = (string)dataReader.GetFieldValue<object>(21);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext2.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(User)
                    }
                    ;
                    entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType2, 
                        entity: instance2, 
                        snapshot: shadowSnapshot2);
                    return instance2;
                } : default(void);
                return instance2;
            };
            resultContext.Values = new object[]
            { 
                entity, 
                entity 
            };
            ShaperProcessingExpressionVisitor.IncludeReference<ToDos, ToDos, User>(
                queryContext: queryContext, 
                entity: (ToDos)(resultContext.Values[0]), 
                relatedEntity: (User)(resultContext.Values[1]), 
                navigation: [LIFTABLE Constant: Navigation: ToDos.User (User) ToPrincipal User | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindNavigation("User")], 
                inverseNavigation: default(INavigation), 
                fixup: (namelessParameter{9}, namelessParameter{10}) => 
                {
                    return namelessParameter{9}.<User>k__BackingField = namelessParameter{10};
                }, 
                trackingQuery: True);
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<ToDos, ToDos>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (ToDos)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    (object)(int?)dataReader.GetInt32(0), 
                    (object)(int?)dataReader.GetInt32(10) 
                }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    (object)(int?)dataReader.GetInt32(0), 
                    (object)(int?)dataReader.GetInt32(10) 
                }], 
                navigation: [LIFTABLE Constant: Navigation: ToDos.SubTasks (ICollection<SubTask>) Collection ToDependent SubTask Inverse: ToDo | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindNavigation("SubTasks")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<ToDos, ICollection<SubTask>, SubTask> | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindNavigation("SubTasks").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<ToDos, SubTask>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
            { 
                (object)(int?)dataReader.GetInt32(0), 
                (object)(int?)dataReader.GetInt32(10) 
            }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
            { 
                (object)(int?)dataReader.GetInt32(0), 
                (object)(int?)dataReader.GetInt32(10) 
            }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(22) ? default(int?) : (int?)dataReader.GetInt32(22) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
            { 
                (left, right) => left == null ? right == null : right != null && (int)left == (int)right, 
                (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
            }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
            { 
                (left, right) => left == null ? right == null : right != null && (int)left == (int)right, 
                (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
            }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                SubTask entity;
                entity = 
                {
                    MaterializationContext materializationContext3;
                    IEntityType entityType3;
                    SubTask instance3;
                    InternalEntityEntry entry3;
                    bool hasNullKey3;
                    materializationContext3 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance3 = default(SubTask);
                    entry3 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: SubTask.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(22) ? default(object) : (object)dataReader.GetInt32(22) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey3);
                    !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
                    {
                        entityType3 = entry3.EntityType;
                        return instance3 = (SubTask)entry3.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot3;
                        shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType3 = [LIFTABLE Constant: EntityType: SubTask | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask")];
                        instance3 = switch (entityType3)
                        {
                            case [LIFTABLE Constant: EntityType: SubTask | Resolver: namelessParameter{14} => namelessParameter{14}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask")]: 
                                {
                                    return 
                                    {
                                        SubTask instance;
                                        instance = new SubTask();
                                        instance.<Id>k__BackingField = dataReader.IsDBNull(22) ? default(int) : dataReader.GetInt32(22);
                                        instance.<CreatedAt>k__BackingField = dataReader.IsDBNull(23) ? default(DateTime) : dataReader.GetDateTime(23);
                                        instance.<CreatedBy>k__BackingField = dataReader.IsDBNull(24) ? default(string) : (string)dataReader.GetFieldValue<object>(24);
                                        instance.<IsDeleted>k__BackingField = dataReader.IsDBNull(25) ? default(bool) : dataReader.GetBoolean(25);
                                        instance.<Status>k__BackingField = dataReader.IsDBNull(26) ? default(TaskStatuss) : Invoke(((EnumToStringConverter<TaskStatuss>)((IReadOnlyProperty)[LIFTABLE Constant: Property: SubTask.Status (TaskStatuss) Required MaxLength(20) | Resolver: namelessParameter{15} => namelessParameter{15}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, (string)dataReader.GetFieldValue<object>(26));
                                        instance.<Title>k__BackingField = dataReader.IsDBNull(27) ? default(string) : (string)dataReader.GetFieldValue<object>(27);
                                        instance.<ToDoId>k__BackingField = dataReader.IsDBNull(28) ? default(int) : dataReader.GetInt32(28);
                                        instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(29) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(29);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext3.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: SubTask | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(SubTask)
                        }
                        ;
                        entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType3, 
                            entity: instance3, 
                            snapshot: shadowSnapshot3);
                        return instance3;
                    } : default(void);
                    return instance3;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: SubTask.ToDo (ToDos) ToPrincipal ToDos Inverse: SubTasks | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.SubTask").FindNavigation("ToDo")], 
            fixup: (namelessParameter{18}, namelessParameter{19}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<ToDos, ICollection<SubTask>, SubTask> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.ToDos").FindNavigation("SubTasks").GetCollectionAccessor()].Add(
                    entity: namelessParameter{18}, 
                    value: namelessParameter{19}, 
                    forMaterialization: True);
                return namelessParameter{19}.<ToDo>k__BackingField = namelessParameter{18};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (ToDos)(resultContext.Values[0]) : default(ToDos);
    }, 
    contextType: ToDo.Data.AppDbContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)' 
2025-09-17 20:55:01.6610 | DEBUG | Creating DbConnection. 
2025-09-17 20:55:01.6610 | DEBUG | Created DbConnection. (0ms). 
2025-09-17 20:55:01.6610 | DEBUG | Opening connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:55:01.6610 | DEBUG | Opened connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:55:01.6610 | DEBUG | Creating DbCommand for 'ExecuteReader'. 
2025-09-17 20:55:01.6610 | DEBUG | Created DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:55:01.6610 | DEBUG | Initialized DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:55:01.6610 | DEBUG | Executing DbCommand [Parameters=[@__userId_Value_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT [t].[Id], [t].[CreatedAt], [t].[CreatedBy], [t].[Description], [t].[IsDeleted], [t].[Status], [t].[Title], [t].[ToDoAt], [t].[UpdatedAt], [t].[UserId], [u].[Id], [u].[CreatedAt], [u].[CreatedBy], [u].[Email], [u].[EmailVerificationCodeExpires], [u].[EmailVerificationCodeHash], [u].[IsDeleted], [u].[IsEmailConfirmed], [u].[LastVerificationSentAt], [u].[Password], [u].[UpdatedAt], [u].[Username], [s].[Id], [s].[CreatedAt], [s].[CreatedBy], [s].[IsDeleted], [s].[Status], [s].[Title], [s].[ToDoId], [s].[UpdatedAt]
FROM [ToDos] AS [t]
INNER JOIN [Users] AS [u] ON [t].[UserId] = [u].[Id]
LEFT JOIN [SubTasks] AS [s] ON [t].[Id] = [s].[ToDoId]
WHERE [t].[UserId] = @__userId_Value_0 AND [t].[IsDeleted] = CAST(0 AS bit) AND [t].[IsDeleted] = CAST(0 AS bit) AND [t].[IsDeleted] = CAST(0 AS bit)
ORDER BY [t].[Id], [u].[Id] 
2025-09-17 20:55:01.6715 | DEBUG | Context 'AppDbContext' started tracking 'ToDos' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 20:55:01.6715 | DEBUG | The navigation 'ToDos.User' was detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 20:55:01.6715 | DEBUG | Context 'AppDbContext' started tracking 'User' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 20:55:01.6715 | DEBUG | Closing data reader to 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:55:01.6715 | DEBUG | A data reader for 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' is being disposed after spending 5ms reading results. 
2025-09-17 20:55:01.6715 | DEBUG | Closing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:55:01.6715 | DEBUG | Closed connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' (0ms). 
2025-09-17 20:55:01.6715 | DEBUG | List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter 
2025-09-17 20:55:01.6715 | DEBUG | No information found on request to perform content negotiation. 
2025-09-17 20:55:01.6715 | DEBUG | Attempting to select an output formatter without using a content type as no explicit content types were specified for the response. 
2025-09-17 20:55:01.6715 | DEBUG | Attempting to select the first formatter in the output formatters list which can write the result. 
2025-09-17 20:55:01.6715 | DEBUG | Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response. 
2025-09-17 20:55:01.6715 | DEBUG | Connection id "0HNFM2BNMOD6A" completed keep alive response. 
2025-09-17 20:55:01.6715 | DEBUG | 'AppDbContext' disposed. 
2025-09-17 20:55:01.6715 | DEBUG | Disposing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:55:01.6715 | DEBUG | Disposed connection to database '' on server '' (0ms). 
2025-09-17 20:55:01.6715 | DEBUG | Connection id "0HNFM2BNMOD6A", Request id "0HNFM2BNMOD6A:00000002": started reading request body. 
2025-09-17 20:55:01.6715 | DEBUG | Connection id "0HNFM2BNMOD6A", Request id "0HNFM2BNMOD6A:00000002": done reading request body. 
2025-09-17 20:55:27.5985 | DEBUG | Connection id "0HNFM2BNMOD6B" accepted. 
2025-09-17 20:55:27.5985 | DEBUG | Connection id "0HNFM2BNMOD6B" started. 
2025-09-17 20:55:27.5985 | DEBUG | Connection 0HNFM2BNMOD6B established using the following protocol: Tls13 
2025-09-17 20:55:27.5985 | DEBUG | 1 candidate(s) found for the request path '/api/SubTasks/todo/1' 
2025-09-17 20:55:27.5985 | DEBUG | Endpoint 'ToDo.API.Controllers.SubTasksController.GetSubTasksByToDo (ToDo.API)' with route pattern 'api/SubTasks/todo/{todoId}' is valid for the request path '/api/SubTasks/todo/1' 
2025-09-17 20:55:27.5985 | DEBUG | Request matched endpoint 'ToDo.API.Controllers.SubTasksController.GetSubTasksByToDo (ToDo.API)' 
2025-09-17 20:55:27.6114 | DEBUG | AuthenticationScheme: Bearer was not authenticated. 
2025-09-17 20:55:27.6114 | DEBUG | Execution plan of authorization filters (in the following order): None 
2025-09-17 20:55:27.6114 | DEBUG | Execution plan of resource filters (in the following order): None 
2025-09-17 20:55:27.6114 | DEBUG | Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000) 
2025-09-17 20:55:27.6114 | DEBUG | Execution plan of exception filters (in the following order): None 
2025-09-17 20:55:27.6114 | DEBUG | Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000) 
2025-09-17 20:55:27.6114 | DEBUG | Executing controller factory for controller ToDo.API.Controllers.SubTasksController (ToDo.API) 
2025-09-17 20:55:27.6671 | DEBUG | Entity Framework Core 9.0.8 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.8' with options: MigrationsAssembly=ToDo.Data EngineType=SqlServer  
2025-09-17 20:55:27.6739 | DEBUG | Executed controller factory for controller ToDo.API.Controllers.SubTasksController (ToDo.API) 
2025-09-17 20:55:27.6739 | DEBUG | Attempting to bind parameter 'todoId' of type 'System.Int32' ... 
2025-09-17 20:55:27.6739 | DEBUG | Attempting to bind parameter 'todoId' of type 'System.Int32' using the name 'todoId' in request data ... 
2025-09-17 20:55:27.6739 | DEBUG | Done attempting to bind parameter 'todoId' of type 'System.Int32'. 
2025-09-17 20:55:27.6739 | DEBUG | Done attempting to bind parameter 'todoId' of type 'System.Int32'. 
2025-09-17 20:55:27.6739 | DEBUG | Attempting to validate the bound parameter 'todoId' of type 'System.Int32' ... 
2025-09-17 20:55:27.6739 | DEBUG | Done attempting to validate the bound parameter 'todoId' of type 'System.Int32'. 
2025-09-17 20:55:27.7179 | DEBUG | List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter 
2025-09-17 20:55:27.7179 | DEBUG | Attempting to select an output formatter based on Accept header 'text/plain'. 
2025-09-17 20:55:27.7179 | DEBUG | Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter' and content type 'text/plain' to write the response. 
2025-09-17 20:55:27.7179 | DEBUG | 'AppDbContext' disposed. 
2025-09-17 20:57:13.3027 | DEBUG | Connection id "0HNFM2BNMOD6A" disconnecting. 
2025-09-17 20:57:13.3027 | DEBUG | Connection id "0HNFM2BNMOD6A" stopped. 
2025-09-17 20:57:13.3027 | DEBUG | Connection id "0HNFM2BNMOD6A" sending FIN because: "The Socket transport's send loop completed gracefully." 
2025-09-17 20:57:40.4704 | DEBUG | Connection id "0HNFM2BNMOD6B" is closing. 
2025-09-17 20:57:40.4704 | DEBUG | Connection id "0HNFM2BNMOD6B" is closed. The last processed stream ID was 1. 
2025-09-17 20:57:40.4704 | DEBUG | The connection queue processing loop for 0HNFM2BNMOD6B completed. 
2025-09-17 20:57:40.4704 | DEBUG | Connection id "0HNFM2BNMOD6B" stopped. 
2025-09-17 20:57:40.4704 | DEBUG | Connection id "0HNFM2BNMOD6B" received FIN. 
2025-09-17 20:57:40.4704 | DEBUG | Connection id "0HNFM2BNMOD6B" sending FIN because: "The Socket transport's send loop completed gracefully." 
2025-09-17 20:57:55.3546 | DEBUG | Connection id "0HNFM2BNMOD6C" accepted. 
2025-09-17 20:57:55.3546 | DEBUG | Connection id "0HNFM2BNMOD6C" received FIN. 
2025-09-17 20:57:55.3546 | DEBUG | Connection id "0HNFM2BNMOD6C" started. 
2025-09-17 20:57:55.3546 | DEBUG | Failed to authenticate HTTPS connection. System.IO.IOException: Received an unexpected EOF or 0 bytes from the transport stream.
   at System.Net.Security.SslStream.ReceiveHandshakeFrameAsync[TIOAdapter](CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.OnConnectionAsync(ConnectionContext context)
2025-09-17 20:57:55.3546 | DEBUG | Connection id "0HNFM2BNMOD6D" accepted. 
2025-09-17 20:57:55.3546 | DEBUG | Connection id "0HNFM2BNMOD6C" stopped. 
2025-09-17 20:57:55.3546 | DEBUG | Connection id "0HNFM2BNMOD6C" sending FIN because: "The Socket transport's send loop completed gracefully." 
2025-09-17 20:57:55.3546 | DEBUG | Connection id "0HNFM2BNMOD6D" started. 
2025-09-17 20:57:55.3644 | DEBUG | Connection 0HNFM2BNMOD6D established using the following protocol: Tls13 
2025-09-17 20:57:55.3644 | DEBUG | 1 candidate(s) found for the request path '/api/user/login' 
2025-09-17 20:57:55.3644 | DEBUG | Endpoint 'ToDo.API.Controllers.UserController.Login (ToDo.API)' with route pattern 'api/User/login' is valid for the request path '/api/user/login' 
2025-09-17 20:57:55.3644 | DEBUG | Request matched endpoint 'ToDo.API.Controllers.UserController.Login (ToDo.API)' 
2025-09-17 20:57:55.3644 | DEBUG | Connection id "0HNFM2BNMOD6D", Request id "0HNFM2BNMOD6D:00000001": started reading request body. 
2025-09-17 20:57:55.3644 | DEBUG | Connection id "0HNFM2BNMOD6D", Request id "0HNFM2BNMOD6D:00000001": done reading request body. 
2025-09-17 20:57:55.3759 | DEBUG | AuthenticationScheme: Bearer was not authenticated. 
2025-09-17 20:57:55.3759 | DEBUG | Execution plan of authorization filters (in the following order): None 
2025-09-17 20:57:55.3759 | DEBUG | Execution plan of resource filters (in the following order): None 
2025-09-17 20:57:55.3759 | DEBUG | Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000) 
2025-09-17 20:57:55.3759 | DEBUG | Execution plan of exception filters (in the following order): None 
2025-09-17 20:57:55.3759 | DEBUG | Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000) 
2025-09-17 20:57:55.3759 | DEBUG | Executing controller factory for controller ToDo.API.Controllers.UserController (ToDo.API) 
2025-09-17 20:57:55.3759 | DEBUG | Entity Framework Core 9.0.8 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:9.0.8' with options: MigrationsAssembly=ToDo.Data EngineType=SqlServer  
2025-09-17 20:57:55.3759 | DEBUG | Executed controller factory for controller ToDo.API.Controllers.UserController (ToDo.API) 
2025-09-17 20:57:55.3759 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' ... 
2025-09-17 20:57:55.3759 | DEBUG | Attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' using the name '' in request data ... 
2025-09-17 20:57:55.3759 | DEBUG | Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'. 
2025-09-17 20:57:55.3759 | DEBUG | JSON input formatter succeeded, deserializing to type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' 
2025-09-17 20:57:55.3759 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:57:55.3759 | DEBUG | Done attempting to bind parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:57:55.3759 | DEBUG | Attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto' ... 
2025-09-17 20:57:55.3759 | DEBUG | Done attempting to validate the bound parameter 'dto' of type 'ToDo.API.Dtos.UserDtos.Login.LoginRequestDto'. 
2025-09-17 20:57:55.3759 | DEBUG | Compiling query expression: 
'DbSet<User>()
    .Where(u => u.Email == __dto_Email_0 && !(u.IsDeleted))
    .Where(e => !(e.IsDeleted))
    .Include("UserRoles")
    .Include("UserRoles.Role")
    .FirstOrDefault()' 
2025-09-17 20:57:55.3759 | DEBUG | Including navigation: 'User.UserRoles'. 
2025-09-17 20:57:55.3759 | DEBUG | Including navigation: 'UserRole.Role'. 
2025-09-17 20:57:55.4133 | DEBUG | Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<User>(
    asyncEnumerable: SingleQueryingEnumerable.Create<User>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: User.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: User.CreatedAt (DateTime) Required, 1], [Property: User.CreatedBy (string) Required, 2], [Property: User.Email (string) Required, 3], [Property: User.EmailVerificationCodeExpires (DateTime?), 4], [Property: User.EmailVerificationCodeHash (string), 5], [Property: User.IsDeleted (bool) Required, 6], [Property: User.IsEmailConfirmed (bool) Required, 7], [Property: User.LastVerificationSentAt (DateTime?), 8], [Property: User.Password (string) Required, 9], [Property: User.UpdatedAt (DateTime?), 10], [Property: User.Username (string) Required MaxLength(50), 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: UserRole.UserId (int) Required PK FK AfterSave:Throw, 12], [Property: UserRole.RoleId (int) Required PK FK Index AfterSave:Throw, 13], [Property: UserRole.CreatedAt (DateTime) Required, 14], [Property: UserRole.CreatedBy (string) Required, 15], [Property: UserRole.Id (int) Required ValueGenerated.OnAdd, 16], [Property: UserRole.IsDeleted (bool) Required, 17], [Property: UserRole.UpdatedAt (DateTime?), 18] }
                3 -> Dictionary<IProperty, int> { [Property: Role.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 19], [Property: Role.CreatedAt (DateTime) Required, 20], [Property: Role.CreatedBy (string) Required, 21], [Property: Role.IsDeleted (bool) Required, 22], [Property: Role.Name (string) Required, 23], [Property: Role.UpdatedAt (DateTime?), 24] }
                4 -> 12
                5 -> 13
                6 -> 19
            SELECT u1.Id, u1.CreatedAt, u1.CreatedBy, u1.Email, u1.EmailVerificationCodeExpires, u1.EmailVerificationCodeHash, u1.IsDeleted, u1.IsEmailConfirmed, u1.LastVerificationSentAt, u1.Password, u1.UpdatedAt, u1.Username, s.UserId, s.RoleId, s.CreatedAt, s.CreatedBy, s.Id, s.IsDeleted, s.UpdatedAt, s.Id0, s.CreatedAt0, s.CreatedBy0, s.IsDeleted0, s.Name, s.UpdatedAt0
            FROM 
            (
                SELECT TOP(1) u.Id, u.CreatedAt, u.CreatedBy, u.Email, u.EmailVerificationCodeExpires, u.EmailVerificationCodeHash, u.IsDeleted, u.IsEmailConfirmed, u.LastVerificationSentAt, u.Password, u.UpdatedAt, u.Username
                FROM Users AS u
                WHERE ((u.Email == @__dto_Email_0) && Not(u.IsDeleted)) && Not(u.IsDeleted)
            ) AS u1
            LEFT JOIN 
            (
                SELECT u0.UserId, u0.RoleId, u0.CreatedAt, u0.CreatedBy, u0.Id, u0.IsDeleted, u0.UpdatedAt, r.Id AS Id0, r.CreatedAt AS CreatedAt0, r.CreatedBy AS CreatedBy0, r.IsDeleted AS IsDeleted0, r.Name, r.UpdatedAt AS UpdatedAt0
                FROM UserRole AS u0
                INNER JOIN Roles AS r ON u0.RoleId == r.Id
            ) AS s ON u1.Id == s.UserId
            ORDER BY u1.Id ASC, s.UserId ASC, s.RoleId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: User.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: User.CreatedAt (DateTime) Required, 1], [Property: User.CreatedBy (string) Required, 2], [Property: User.Email (string) Required, 3], [Property: User.EmailVerificationCodeExpires (DateTime?), 4], [Property: User.EmailVerificationCodeHash (string), 5], [Property: User.IsDeleted (bool) Required, 6], [Property: User.IsEmailConfirmed (bool) Required, 7], [Property: User.LastVerificationSentAt (DateTime?), 8], [Property: User.Password (string) Required, 9], [Property: User.UpdatedAt (DateTime?), 10], [Property: User.Username (string) Required MaxLength(50), 11] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: UserRole.UserId (int) Required PK FK AfterSave:Throw, 12], [Property: UserRole.RoleId (int) Required PK FK Index AfterSave:Throw, 13], [Property: UserRole.CreatedAt (DateTime) Required, 14], [Property: UserRole.CreatedBy (string) Required, 15], [Property: UserRole.Id (int) Required ValueGenerated.OnAdd, 16], [Property: UserRole.IsDeleted (bool) Required, 17], [Property: UserRole.UpdatedAt (DateTime?), 18] }
                3 -> Dictionary<IProperty, int> { [Property: Role.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 19], [Property: Role.CreatedAt (DateTime) Required, 20], [Property: Role.CreatedBy (string) Required, 21], [Property: Role.IsDeleted (bool) Required, 22], [Property: Role.Name (string) Required, 23], [Property: Role.UpdatedAt (DateTime?), 24] }
                4 -> 12
                5 -> 13
                6 -> 19
            SELECT u1.Id, u1.CreatedAt, u1.CreatedBy, u1.Email, u1.EmailVerificationCodeExpires, u1.EmailVerificationCodeHash, u1.IsDeleted, u1.IsEmailConfirmed, u1.LastVerificationSentAt, u1.Password, u1.UpdatedAt, u1.Username, s.UserId, s.RoleId, s.CreatedAt, s.CreatedBy, s.Id, s.IsDeleted, s.UpdatedAt, s.Id0, s.CreatedAt0, s.CreatedBy0, s.IsDeleted0, s.Name, s.UpdatedAt0
            FROM 
            (
                SELECT TOP(1) u.Id, u.CreatedAt, u.CreatedBy, u.Email, u.EmailVerificationCodeExpires, u.EmailVerificationCodeHash, u.IsDeleted, u.IsEmailConfirmed, u.LastVerificationSentAt, u.Password, u.UpdatedAt, u.Username
                FROM Users AS u
                WHERE ((u.Email == @__dto_Email_0) && Not(u.IsDeleted)) && Not(u.IsDeleted)
            ) AS u1
            LEFT JOIN 
            (
                SELECT u0.UserId, u0.RoleId, u0.CreatedAt, u0.CreatedBy, u0.Id, u0.IsDeleted, u0.UpdatedAt, r.Id AS Id0, r.CreatedAt AS CreatedAt0, r.CreatedBy AS CreatedBy0, r.IsDeleted AS IsDeleted0, r.Name, r.UpdatedAt AS UpdatedAt0
                FROM UserRole AS u0
                INNER JOIN Roles AS r ON u0.RoleId == r.Id
            ) AS s ON u1.Id == s.UserId
            ORDER BY u1.Id ASC, s.UserId ASC, s.RoleId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: [LIFTABLE Constant: ReaderColumn[] { ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<bool>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<int>, ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<int>, ReaderColumn<bool>, ReaderColumn<DateTime>, ReaderColumn<int>, ReaderColumn<DateTime>, ReaderColumn<object>, ReaderColumn<bool>, ReaderColumn<object>, ReaderColumn<DateTime> } | Resolver: namelessParameter{0} => new ReaderColumn[]
        { 
            new ReaderColumn<int>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(0)
            ), 
            new ReaderColumn<DateTime>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(1)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(2)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Email"), 
                (dataReader, indexMap) => (object)dataReader.GetString(3)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("EmailVerificationCodeExpires"), 
                (dataReader, indexMap) => dataReader.GetDateTime(4)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("EmailVerificationCodeHash"), 
                (dataReader, indexMap) => (object)dataReader.GetString(5)
            ), 
            new ReaderColumn<bool>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(6)
            ), 
            new ReaderColumn<bool>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("IsEmailConfirmed"), 
                (dataReader, indexMap) => dataReader.GetBoolean(7)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("LastVerificationSentAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(8)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Password"), 
                (dataReader, indexMap) => (object)dataReader.GetString(9)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(10)
            ), 
            new ReaderColumn<object>(
                False, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindProperty("Username"), 
                (dataReader, indexMap) => (object)dataReader.GetString(11)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("UserId"), 
                (dataReader, indexMap) => dataReader.GetInt32(12)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("RoleId"), 
                (dataReader, indexMap) => dataReader.GetInt32(13)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(14)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(15)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(16)
            ), 
            new ReaderColumn<bool>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(17)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(18)
            ), 
            new ReaderColumn<int>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("Id"), 
                (dataReader, indexMap) => dataReader.GetInt32(19)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("CreatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(20)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("CreatedBy"), 
                (dataReader, indexMap) => (object)dataReader.GetString(21)
            ), 
            new ReaderColumn<bool>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("IsDeleted"), 
                (dataReader, indexMap) => dataReader.GetBoolean(22)
            ), 
            new ReaderColumn<object>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("Name"), 
                (dataReader, indexMap) => (object)dataReader.GetString(23)
            ), 
            new ReaderColumn<DateTime>(
                True, 
                null, 
                namelessParameter{0}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindProperty("UpdatedAt"), 
                (dataReader, indexMap) => dataReader.GetDateTime(24)
            ) 
        }], 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                User entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    User instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(User);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: User.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (User)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")]: 
                                {
                                    return 
                                    {
                                        User instance;
                                        instance = new User();
                                        instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                        instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(1);
                                        instance.<CreatedBy>k__BackingField = (string)dataReader.GetFieldValue<object>(2);
                                        instance.<Email>k__BackingField = (string)dataReader.GetFieldValue<object>(3);
                                        instance.<EmailVerificationCodeExpires>k__BackingField = dataReader.IsDBNull(4) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(4);
                                        instance.<EmailVerificationCodeHash>k__BackingField = dataReader.IsDBNull(5) ? default(string) : (string)dataReader.GetFieldValue<object>(5);
                                        instance.<IsDeleted>k__BackingField = dataReader.GetBoolean(6);
                                        instance.<IsEmailConfirmed>k__BackingField = dataReader.GetBoolean(7);
                                        instance.<LastVerificationSentAt>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(8);
                                        instance.<Password>k__BackingField = (string)dataReader.GetFieldValue<object>(9);
                                        instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(10) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(10);
                                        instance.<Username>k__BackingField = (string)dataReader.GetFieldValue<object>(11);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: User | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(User)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<User, User>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (User)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: User.UserRoles (ICollection<UserRole>) Collection ToDependent UserRole Inverse: User | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindNavigation("UserRoles")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<User, ICollection<UserRole>, UserRole> | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindNavigation("UserRoles").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<User, UserRole>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    (object)dataReader.IsDBNull(12) ? default(int?) : (int?)dataReader.GetInt32(12), 
                    (object)dataReader.IsDBNull(13) ? default(int?) : (int?)dataReader.GetInt32(13), 
                    (object)dataReader.IsDBNull(19) ? default(int?) : (int?)dataReader.GetInt32(19) 
                }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    UserRole entity;
                    Role entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        UserRole instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(UserRole);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: UserRole.UserId, UserRole.RoleId PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindPrimaryKey()], 
                            keyValues: new object[]
                            { 
                                dataReader.IsDBNull(12) ? default(object) : (object)dataReader.GetInt32(12), 
                                dataReader.IsDBNull(13) ? default(object) : (object)dataReader.GetInt32(13) 
                            }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (UserRole)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: UserRole | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: UserRole | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole")]: 
                                    {
                                        return 
                                        {
                                            UserRole instance;
                                            instance = new UserRole();
                                            instance.<UserId>k__BackingField = dataReader.IsDBNull(12) ? default(int) : dataReader.GetInt32(12);
                                            instance.<RoleId>k__BackingField = dataReader.IsDBNull(13) ? default(int) : dataReader.GetInt32(13);
                                            instance.<CreatedAt>k__BackingField = dataReader.IsDBNull(14) ? default(DateTime) : dataReader.GetDateTime(14);
                                            instance.<CreatedBy>k__BackingField = dataReader.IsDBNull(15) ? default(string) : (string)dataReader.GetFieldValue<object>(15);
                                            instance.<Id>k__BackingField = dataReader.IsDBNull(16) ? default(int) : dataReader.GetInt32(16);
                                            instance.<IsDeleted>k__BackingField = dataReader.IsDBNull(17) ? default(bool) : dataReader.GetBoolean(17);
                                            instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(18) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(18);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: UserRole | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(UserRole)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    entity = 
                    {
                        MaterializationContext materializationContext3;
                        IEntityType entityType3;
                        Role instance3;
                        InternalEntityEntry entry3;
                        bool hasNullKey3;
                        materializationContext3 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance3 = default(Role);
                        entry3 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: Role.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindPrimaryKey()], 
                            keyValues: new object[]{ dataReader.IsDBNull(19) ? default(object) : (object)dataReader.GetInt32(19) }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey3);
                        !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
                        {
                            entityType3 = entry3.EntityType;
                            return instance3 = (Role)entry3.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot3;
                            shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType3 = [LIFTABLE Constant: EntityType: Role | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role")];
                            instance3 = switch (entityType3)
                            {
                                case [LIFTABLE Constant: EntityType: Role | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role")]: 
                                    {
                                        return 
                                        {
                                            Role instance;
                                            instance = new Role();
                                            instance.<Id>k__BackingField = dataReader.IsDBNull(19) ? default(int) : dataReader.GetInt32(19);
                                            instance.<CreatedAt>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime) : dataReader.GetDateTime(20);
                                            instance.<CreatedBy>k__BackingField = dataReader.IsDBNull(21) ? default(string) : (string)dataReader.GetFieldValue<object>(21);
                                            instance.<IsDeleted>k__BackingField = dataReader.IsDBNull(22) ? default(bool) : dataReader.GetBoolean(22);
                                            instance.<Name>k__BackingField = dataReader.IsDBNull(23) ? default(string) : (string)dataReader.GetFieldValue<object>(23);
                                            instance.<UpdatedAt>k__BackingField = dataReader.IsDBNull(24) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(24);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext3.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: Role | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(Role)
                            }
                            ;
                            entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType3, 
                                entity: instance3, 
                                snapshot: shadowSnapshot3);
                            return instance3;
                        } : default(void);
                        return instance3;
                    };
                    ShaperProcessingExpressionVisitor.IncludeReference<UserRole, UserRole, Role>(
                        queryContext: queryContext, 
                        entity: entity, 
                        relatedEntity: entity, 
                        navigation: [LIFTABLE Constant: Navigation: UserRole.Role (Role) ToPrincipal Role Inverse: UserRoles | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindNavigation("Role")], 
                        inverseNavigation: [LIFTABLE Constant: Navigation: Role.UserRoles (ICollection<UserRole>) Collection ToDependent UserRole Inverse: Role | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindNavigation("UserRoles")], 
                        fixup: (namelessParameter{14}, namelessParameter{15}) => 
                        {
                            namelessParameter{14}.<Role>k__BackingField = namelessParameter{15};
                            return [LIFTABLE Constant: ClrICollectionAccessor<Role, ICollection<UserRole>, UserRole> | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.Role").FindNavigation("UserRoles").GetCollectionAccessor()].Add(
                                entity: namelessParameter{15}, 
                                value: namelessParameter{14}, 
                                forMaterialization: True);
                        }, 
                        trackingQuery: True);
                    return entity;
                }, 
                inverseNavigation: [LIFTABLE Constant: Navigation: UserRole.User (User) ToPrincipal User Inverse: UserRoles | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.UserRole").FindNavigation("User")], 
                fixup: (namelessParameter{18}, namelessParameter{19}) => 
                {
                    [LIFTABLE Constant: ClrICollectionAccessor<User, ICollection<UserRole>, UserRole> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("ToDo.Data.Entities.User").FindNavigation("UserRoles").GetCollectionAccessor()].Add(
                        entity: namelessParameter{18}, 
                        value: namelessParameter{19}, 
                        forMaterialization: True);
                    return namelessParameter{19}.<User>k__BackingField = namelessParameter{18};
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (User)(resultContext.Values[0]) : default(User);
        }, 
        contextType: ToDo.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)' 
2025-09-17 20:57:55.4261 | DEBUG | Creating DbConnection. 
2025-09-17 20:57:55.4261 | DEBUG | Created DbConnection. (0ms). 
2025-09-17 20:57:55.4261 | DEBUG | Opening connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:57:55.4261 | DEBUG | Opened connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:57:55.4261 | DEBUG | Creating DbCommand for 'ExecuteReader'. 
2025-09-17 20:57:55.4261 | DEBUG | Created DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:57:55.4261 | DEBUG | Initialized DbCommand for 'ExecuteReader' (0ms). 
2025-09-17 20:57:55.4261 | DEBUG | Executing DbCommand [Parameters=[@__dto_Email_0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']
SELECT [u1].[Id], [u1].[CreatedAt], [u1].[CreatedBy], [u1].[Email], [u1].[EmailVerificationCodeExpires], [u1].[EmailVerificationCodeHash], [u1].[IsDeleted], [u1].[IsEmailConfirmed], [u1].[LastVerificationSentAt], [u1].[Password], [u1].[UpdatedAt], [u1].[Username], [s].[UserId], [s].[RoleId], [s].[CreatedAt], [s].[CreatedBy], [s].[Id], [s].[IsDeleted], [s].[UpdatedAt], [s].[Id0], [s].[CreatedAt0], [s].[CreatedBy0], [s].[IsDeleted0], [s].[Name], [s].[UpdatedAt0]
FROM (
    SELECT TOP(1) [u].[Id], [u].[CreatedAt], [u].[CreatedBy], [u].[Email], [u].[EmailVerificationCodeExpires], [u].[EmailVerificationCodeHash], [u].[IsDeleted], [u].[IsEmailConfirmed], [u].[LastVerificationSentAt], [u].[Password], [u].[UpdatedAt], [u].[Username]
    FROM [Users] AS [u]
    WHERE [u].[Email] = @__dto_Email_0 AND [u].[IsDeleted] = CAST(0 AS bit) AND [u].[IsDeleted] = CAST(0 AS bit)
) AS [u1]
LEFT JOIN (
    SELECT [u0].[UserId], [u0].[RoleId], [u0].[CreatedAt], [u0].[CreatedBy], [u0].[Id], [u0].[IsDeleted], [u0].[UpdatedAt], [r].[Id] AS [Id0], [r].[CreatedAt] AS [CreatedAt0], [r].[CreatedBy] AS [CreatedBy0], [r].[IsDeleted] AS [IsDeleted0], [r].[Name], [r].[UpdatedAt] AS [UpdatedAt0]
    FROM [UserRole] AS [u0]
    INNER JOIN [Roles] AS [r] ON [u0].[RoleId] = [r].[Id]
) AS [s] ON [u1].[Id] = [s].[UserId]
ORDER BY [u1].[Id], [s].[UserId], [s].[RoleId] 
2025-09-17 20:57:55.4467 | DEBUG | Context 'AppDbContext' started tracking 'User' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values. 
2025-09-17 20:57:55.4467 | DEBUG | Closing data reader to 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:57:55.4467 | DEBUG | A data reader for 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' is being disposed after spending 4ms reading results. 
2025-09-17 20:57:55.4467 | DEBUG | Closing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:57:55.4467 | DEBUG | Closed connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS' (0ms). 
2025-09-17 20:57:55.5299 | DEBUG | List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter 
2025-09-17 20:57:55.5299 | DEBUG | No information found on request to perform content negotiation. 
2025-09-17 20:57:55.5299 | DEBUG | Attempting to select an output formatter without using a content type as no explicit content types were specified for the response. 
2025-09-17 20:57:55.5299 | DEBUG | Attempting to select the first formatter in the output formatters list which can write the result. 
2025-09-17 20:57:55.5299 | DEBUG | Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response. 
2025-09-17 20:57:55.5318 | DEBUG | Connection id "0HNFM2BNMOD6D" completed keep alive response. 
2025-09-17 20:57:55.5318 | DEBUG | 'AppDbContext' disposed. 
2025-09-17 20:57:55.5318 | DEBUG | Disposing connection to database 'ToDoApp' on server 'DESKTOP-2PRV1GI\SQLEXPRESS'. 
2025-09-17 20:57:55.5318 | DEBUG | Disposed connection to database '' on server '' (0ms). 
2025-09-17 21:00:06.5028 | DEBUG | Connection id "0HNFM2BNMOD6D" disconnecting. 
2025-09-17 21:00:06.5028 | DEBUG | Connection id "0HNFM2BNMOD6D" stopped. 
2025-09-17 21:00:06.5028 | DEBUG | Connection id "0HNFM2BNMOD6D" sending FIN because: "The Socket transport's send loop completed gracefully." 
2025-09-17 21:59:52.7082 | DEBUG | Config reload token fired. Checking for changes... 
2025-09-17 21:59:52.7082 | DEBUG | Middleware configuration started with options: {AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True} 
2025-09-17 21:59:52.7082 | DEBUG | Wildcard detected, all requests with hosts will be allowed. 
2025-09-17 21:59:52.9704 | DEBUG | Middleware configuration started with options: {AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True} 
2025-09-17 21:59:52.9704 | DEBUG | Wildcard detected, all requests with hosts will be allowed. 
2025-09-17 21:59:52.9704 | DEBUG | Config reload token fired. Checking for changes... 
